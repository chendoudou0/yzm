/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Pose3DAnnRuntime_H
#define Pose3DAnnRuntime_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "Pose3DAnnNew_types.h"

namespace ThriftPose3DAnn {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class Pose3DAnnRuntimeIf {
 public:
  virtual ~Pose3DAnnRuntimeIf() {}
  virtual void AutoAlignment(HumanPose3DInfo& _return, const HumanPose3DInfo& poseInfo, const std::vector<bool> & lockInfo) = 0;
  virtual bool CheckResultIsValid(const HumanPose3DInfo& poseInfo, const Image& img) = 0;
};

class Pose3DAnnRuntimeIfFactory {
 public:
  typedef Pose3DAnnRuntimeIf Handler;

  virtual ~Pose3DAnnRuntimeIfFactory() {}

  virtual Pose3DAnnRuntimeIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(Pose3DAnnRuntimeIf* /* handler */) = 0;
};

class Pose3DAnnRuntimeIfSingletonFactory : virtual public Pose3DAnnRuntimeIfFactory {
 public:
  Pose3DAnnRuntimeIfSingletonFactory(const boost::shared_ptr<Pose3DAnnRuntimeIf>& iface) : iface_(iface) {}
  virtual ~Pose3DAnnRuntimeIfSingletonFactory() {}

  virtual Pose3DAnnRuntimeIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(Pose3DAnnRuntimeIf* /* handler */) {}

 protected:
  boost::shared_ptr<Pose3DAnnRuntimeIf> iface_;
};

class Pose3DAnnRuntimeNull : virtual public Pose3DAnnRuntimeIf {
 public:
  virtual ~Pose3DAnnRuntimeNull() {}
  void AutoAlignment(HumanPose3DInfo& /* _return */, const HumanPose3DInfo& /* poseInfo */, const std::vector<bool> & /* lockInfo */) {
    return;
  }
  bool CheckResultIsValid(const HumanPose3DInfo& /* poseInfo */, const Image& /* img */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _Pose3DAnnRuntime_AutoAlignment_args__isset {
  _Pose3DAnnRuntime_AutoAlignment_args__isset() : poseInfo(false), lockInfo(false) {}
  bool poseInfo :1;
  bool lockInfo :1;
} _Pose3DAnnRuntime_AutoAlignment_args__isset;

class Pose3DAnnRuntime_AutoAlignment_args {
 public:

  Pose3DAnnRuntime_AutoAlignment_args(const Pose3DAnnRuntime_AutoAlignment_args&);
  Pose3DAnnRuntime_AutoAlignment_args& operator=(const Pose3DAnnRuntime_AutoAlignment_args&);
  Pose3DAnnRuntime_AutoAlignment_args() {
  }

  virtual ~Pose3DAnnRuntime_AutoAlignment_args() throw();
  HumanPose3DInfo poseInfo;
  std::vector<bool>  lockInfo;

  _Pose3DAnnRuntime_AutoAlignment_args__isset __isset;

  void __set_poseInfo(const HumanPose3DInfo& val);

  void __set_lockInfo(const std::vector<bool> & val);

  bool operator == (const Pose3DAnnRuntime_AutoAlignment_args & rhs) const
  {
    if (!(poseInfo == rhs.poseInfo))
      return false;
    if (!(lockInfo == rhs.lockInfo))
      return false;
    return true;
  }
  bool operator != (const Pose3DAnnRuntime_AutoAlignment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Pose3DAnnRuntime_AutoAlignment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Pose3DAnnRuntime_AutoAlignment_pargs {
 public:


  virtual ~Pose3DAnnRuntime_AutoAlignment_pargs() throw();
  const HumanPose3DInfo* poseInfo;
  const std::vector<bool> * lockInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Pose3DAnnRuntime_AutoAlignment_result__isset {
  _Pose3DAnnRuntime_AutoAlignment_result__isset() : success(false) {}
  bool success :1;
} _Pose3DAnnRuntime_AutoAlignment_result__isset;

class Pose3DAnnRuntime_AutoAlignment_result {
 public:

  Pose3DAnnRuntime_AutoAlignment_result(const Pose3DAnnRuntime_AutoAlignment_result&);
  Pose3DAnnRuntime_AutoAlignment_result& operator=(const Pose3DAnnRuntime_AutoAlignment_result&);
  Pose3DAnnRuntime_AutoAlignment_result() {
  }

  virtual ~Pose3DAnnRuntime_AutoAlignment_result() throw();
  HumanPose3DInfo success;

  _Pose3DAnnRuntime_AutoAlignment_result__isset __isset;

  void __set_success(const HumanPose3DInfo& val);

  bool operator == (const Pose3DAnnRuntime_AutoAlignment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Pose3DAnnRuntime_AutoAlignment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Pose3DAnnRuntime_AutoAlignment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Pose3DAnnRuntime_AutoAlignment_presult__isset {
  _Pose3DAnnRuntime_AutoAlignment_presult__isset() : success(false) {}
  bool success :1;
} _Pose3DAnnRuntime_AutoAlignment_presult__isset;

class Pose3DAnnRuntime_AutoAlignment_presult {
 public:


  virtual ~Pose3DAnnRuntime_AutoAlignment_presult() throw();
  HumanPose3DInfo* success;

  _Pose3DAnnRuntime_AutoAlignment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Pose3DAnnRuntime_CheckResultIsValid_args__isset {
  _Pose3DAnnRuntime_CheckResultIsValid_args__isset() : poseInfo(false), img(false) {}
  bool poseInfo :1;
  bool img :1;
} _Pose3DAnnRuntime_CheckResultIsValid_args__isset;

class Pose3DAnnRuntime_CheckResultIsValid_args {
 public:

  Pose3DAnnRuntime_CheckResultIsValid_args(const Pose3DAnnRuntime_CheckResultIsValid_args&);
  Pose3DAnnRuntime_CheckResultIsValid_args& operator=(const Pose3DAnnRuntime_CheckResultIsValid_args&);
  Pose3DAnnRuntime_CheckResultIsValid_args() {
  }

  virtual ~Pose3DAnnRuntime_CheckResultIsValid_args() throw();
  HumanPose3DInfo poseInfo;
  Image img;

  _Pose3DAnnRuntime_CheckResultIsValid_args__isset __isset;

  void __set_poseInfo(const HumanPose3DInfo& val);

  void __set_img(const Image& val);

  bool operator == (const Pose3DAnnRuntime_CheckResultIsValid_args & rhs) const
  {
    if (!(poseInfo == rhs.poseInfo))
      return false;
    if (!(img == rhs.img))
      return false;
    return true;
  }
  bool operator != (const Pose3DAnnRuntime_CheckResultIsValid_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Pose3DAnnRuntime_CheckResultIsValid_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Pose3DAnnRuntime_CheckResultIsValid_pargs {
 public:


  virtual ~Pose3DAnnRuntime_CheckResultIsValid_pargs() throw();
  const HumanPose3DInfo* poseInfo;
  const Image* img;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Pose3DAnnRuntime_CheckResultIsValid_result__isset {
  _Pose3DAnnRuntime_CheckResultIsValid_result__isset() : success(false) {}
  bool success :1;
} _Pose3DAnnRuntime_CheckResultIsValid_result__isset;

class Pose3DAnnRuntime_CheckResultIsValid_result {
 public:

  Pose3DAnnRuntime_CheckResultIsValid_result(const Pose3DAnnRuntime_CheckResultIsValid_result&);
  Pose3DAnnRuntime_CheckResultIsValid_result& operator=(const Pose3DAnnRuntime_CheckResultIsValid_result&);
  Pose3DAnnRuntime_CheckResultIsValid_result() : success(0) {
  }

  virtual ~Pose3DAnnRuntime_CheckResultIsValid_result() throw();
  bool success;

  _Pose3DAnnRuntime_CheckResultIsValid_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const Pose3DAnnRuntime_CheckResultIsValid_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Pose3DAnnRuntime_CheckResultIsValid_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Pose3DAnnRuntime_CheckResultIsValid_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Pose3DAnnRuntime_CheckResultIsValid_presult__isset {
  _Pose3DAnnRuntime_CheckResultIsValid_presult__isset() : success(false) {}
  bool success :1;
} _Pose3DAnnRuntime_CheckResultIsValid_presult__isset;

class Pose3DAnnRuntime_CheckResultIsValid_presult {
 public:


  virtual ~Pose3DAnnRuntime_CheckResultIsValid_presult() throw();
  bool* success;

  _Pose3DAnnRuntime_CheckResultIsValid_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class Pose3DAnnRuntimeClient : virtual public Pose3DAnnRuntimeIf {
 public:
  Pose3DAnnRuntimeClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  Pose3DAnnRuntimeClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void AutoAlignment(HumanPose3DInfo& _return, const HumanPose3DInfo& poseInfo, const std::vector<bool> & lockInfo);
  void send_AutoAlignment(const HumanPose3DInfo& poseInfo, const std::vector<bool> & lockInfo);
  void recv_AutoAlignment(HumanPose3DInfo& _return);
  bool CheckResultIsValid(const HumanPose3DInfo& poseInfo, const Image& img);
  void send_CheckResultIsValid(const HumanPose3DInfo& poseInfo, const Image& img);
  bool recv_CheckResultIsValid();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class Pose3DAnnRuntimeProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<Pose3DAnnRuntimeIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (Pose3DAnnRuntimeProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_AutoAlignment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CheckResultIsValid(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  Pose3DAnnRuntimeProcessor(boost::shared_ptr<Pose3DAnnRuntimeIf> iface) :
    iface_(iface) {
    processMap_["AutoAlignment"] = &Pose3DAnnRuntimeProcessor::process_AutoAlignment;
    processMap_["CheckResultIsValid"] = &Pose3DAnnRuntimeProcessor::process_CheckResultIsValid;
  }

  virtual ~Pose3DAnnRuntimeProcessor() {}
};

class Pose3DAnnRuntimeProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  Pose3DAnnRuntimeProcessorFactory(const ::boost::shared_ptr< Pose3DAnnRuntimeIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< Pose3DAnnRuntimeIfFactory > handlerFactory_;
};

class Pose3DAnnRuntimeMultiface : virtual public Pose3DAnnRuntimeIf {
 public:
  Pose3DAnnRuntimeMultiface(std::vector<boost::shared_ptr<Pose3DAnnRuntimeIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~Pose3DAnnRuntimeMultiface() {}
 protected:
  std::vector<boost::shared_ptr<Pose3DAnnRuntimeIf> > ifaces_;
  Pose3DAnnRuntimeMultiface() {}
  void add(boost::shared_ptr<Pose3DAnnRuntimeIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void AutoAlignment(HumanPose3DInfo& _return, const HumanPose3DInfo& poseInfo, const std::vector<bool> & lockInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AutoAlignment(_return, poseInfo, lockInfo);
    }
    ifaces_[i]->AutoAlignment(_return, poseInfo, lockInfo);
    return;
  }

  bool CheckResultIsValid(const HumanPose3DInfo& poseInfo, const Image& img) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CheckResultIsValid(poseInfo, img);
    }
    return ifaces_[i]->CheckResultIsValid(poseInfo, img);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class Pose3DAnnRuntimeConcurrentClient : virtual public Pose3DAnnRuntimeIf {
 public:
  Pose3DAnnRuntimeConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  Pose3DAnnRuntimeConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void AutoAlignment(HumanPose3DInfo& _return, const HumanPose3DInfo& poseInfo, const std::vector<bool> & lockInfo);
  int32_t send_AutoAlignment(const HumanPose3DInfo& poseInfo, const std::vector<bool> & lockInfo);
  void recv_AutoAlignment(HumanPose3DInfo& _return, const int32_t seqid);
  bool CheckResultIsValid(const HumanPose3DInfo& poseInfo, const Image& img);
  int32_t send_CheckResultIsValid(const HumanPose3DInfo& poseInfo, const Image& img);
  bool recv_CheckResultIsValid(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
