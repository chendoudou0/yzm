/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Pose3DAnnPreprocess_H
#define Pose3DAnnPreprocess_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "Pose3DAnnNew_types.h"

namespace ThriftPose3DAnn {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class Pose3DAnnPreprocessIf {
 public:
  virtual ~Pose3DAnnPreprocessIf() {}
  virtual void CheckIsValid(ImageInitData& _return, const Image& img) = 0;
  virtual void DoInitGuess(GuessInfo& _return, const Image& img) = 0;
  virtual void AutoCalPose3D(std::vector<HumanPose3DInfo> & _return, const Image& img, const GuessInfo& guessInfo) = 0;
};

class Pose3DAnnPreprocessIfFactory {
 public:
  typedef Pose3DAnnPreprocessIf Handler;

  virtual ~Pose3DAnnPreprocessIfFactory() {}

  virtual Pose3DAnnPreprocessIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(Pose3DAnnPreprocessIf* /* handler */) = 0;
};

class Pose3DAnnPreprocessIfSingletonFactory : virtual public Pose3DAnnPreprocessIfFactory {
 public:
  Pose3DAnnPreprocessIfSingletonFactory(const boost::shared_ptr<Pose3DAnnPreprocessIf>& iface) : iface_(iface) {}
  virtual ~Pose3DAnnPreprocessIfSingletonFactory() {}

  virtual Pose3DAnnPreprocessIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(Pose3DAnnPreprocessIf* /* handler */) {}

 protected:
  boost::shared_ptr<Pose3DAnnPreprocessIf> iface_;
};

class Pose3DAnnPreprocessNull : virtual public Pose3DAnnPreprocessIf {
 public:
  virtual ~Pose3DAnnPreprocessNull() {}
  void CheckIsValid(ImageInitData& /* _return */, const Image& /* img */) {
    return;
  }
  void DoInitGuess(GuessInfo& /* _return */, const Image& /* img */) {
    return;
  }
  void AutoCalPose3D(std::vector<HumanPose3DInfo> & /* _return */, const Image& /* img */, const GuessInfo& /* guessInfo */) {
    return;
  }
};

typedef struct _Pose3DAnnPreprocess_CheckIsValid_args__isset {
  _Pose3DAnnPreprocess_CheckIsValid_args__isset() : img(false) {}
  bool img :1;
} _Pose3DAnnPreprocess_CheckIsValid_args__isset;

class Pose3DAnnPreprocess_CheckIsValid_args {
 public:

  Pose3DAnnPreprocess_CheckIsValid_args(const Pose3DAnnPreprocess_CheckIsValid_args&);
  Pose3DAnnPreprocess_CheckIsValid_args& operator=(const Pose3DAnnPreprocess_CheckIsValid_args&);
  Pose3DAnnPreprocess_CheckIsValid_args() {
  }

  virtual ~Pose3DAnnPreprocess_CheckIsValid_args() throw();
  Image img;

  _Pose3DAnnPreprocess_CheckIsValid_args__isset __isset;

  void __set_img(const Image& val);

  bool operator == (const Pose3DAnnPreprocess_CheckIsValid_args & rhs) const
  {
    if (!(img == rhs.img))
      return false;
    return true;
  }
  bool operator != (const Pose3DAnnPreprocess_CheckIsValid_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Pose3DAnnPreprocess_CheckIsValid_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Pose3DAnnPreprocess_CheckIsValid_pargs {
 public:


  virtual ~Pose3DAnnPreprocess_CheckIsValid_pargs() throw();
  const Image* img;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Pose3DAnnPreprocess_CheckIsValid_result__isset {
  _Pose3DAnnPreprocess_CheckIsValid_result__isset() : success(false) {}
  bool success :1;
} _Pose3DAnnPreprocess_CheckIsValid_result__isset;

class Pose3DAnnPreprocess_CheckIsValid_result {
 public:

  Pose3DAnnPreprocess_CheckIsValid_result(const Pose3DAnnPreprocess_CheckIsValid_result&);
  Pose3DAnnPreprocess_CheckIsValid_result& operator=(const Pose3DAnnPreprocess_CheckIsValid_result&);
  Pose3DAnnPreprocess_CheckIsValid_result() {
  }

  virtual ~Pose3DAnnPreprocess_CheckIsValid_result() throw();
  ImageInitData success;

  _Pose3DAnnPreprocess_CheckIsValid_result__isset __isset;

  void __set_success(const ImageInitData& val);

  bool operator == (const Pose3DAnnPreprocess_CheckIsValid_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Pose3DAnnPreprocess_CheckIsValid_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Pose3DAnnPreprocess_CheckIsValid_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Pose3DAnnPreprocess_CheckIsValid_presult__isset {
  _Pose3DAnnPreprocess_CheckIsValid_presult__isset() : success(false) {}
  bool success :1;
} _Pose3DAnnPreprocess_CheckIsValid_presult__isset;

class Pose3DAnnPreprocess_CheckIsValid_presult {
 public:


  virtual ~Pose3DAnnPreprocess_CheckIsValid_presult() throw();
  ImageInitData* success;

  _Pose3DAnnPreprocess_CheckIsValid_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Pose3DAnnPreprocess_DoInitGuess_args__isset {
  _Pose3DAnnPreprocess_DoInitGuess_args__isset() : img(false) {}
  bool img :1;
} _Pose3DAnnPreprocess_DoInitGuess_args__isset;

class Pose3DAnnPreprocess_DoInitGuess_args {
 public:

  Pose3DAnnPreprocess_DoInitGuess_args(const Pose3DAnnPreprocess_DoInitGuess_args&);
  Pose3DAnnPreprocess_DoInitGuess_args& operator=(const Pose3DAnnPreprocess_DoInitGuess_args&);
  Pose3DAnnPreprocess_DoInitGuess_args() {
  }

  virtual ~Pose3DAnnPreprocess_DoInitGuess_args() throw();
  Image img;

  _Pose3DAnnPreprocess_DoInitGuess_args__isset __isset;

  void __set_img(const Image& val);

  bool operator == (const Pose3DAnnPreprocess_DoInitGuess_args & rhs) const
  {
    if (!(img == rhs.img))
      return false;
    return true;
  }
  bool operator != (const Pose3DAnnPreprocess_DoInitGuess_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Pose3DAnnPreprocess_DoInitGuess_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Pose3DAnnPreprocess_DoInitGuess_pargs {
 public:


  virtual ~Pose3DAnnPreprocess_DoInitGuess_pargs() throw();
  const Image* img;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Pose3DAnnPreprocess_DoInitGuess_result__isset {
  _Pose3DAnnPreprocess_DoInitGuess_result__isset() : success(false) {}
  bool success :1;
} _Pose3DAnnPreprocess_DoInitGuess_result__isset;

class Pose3DAnnPreprocess_DoInitGuess_result {
 public:

  Pose3DAnnPreprocess_DoInitGuess_result(const Pose3DAnnPreprocess_DoInitGuess_result&);
  Pose3DAnnPreprocess_DoInitGuess_result& operator=(const Pose3DAnnPreprocess_DoInitGuess_result&);
  Pose3DAnnPreprocess_DoInitGuess_result() {
  }

  virtual ~Pose3DAnnPreprocess_DoInitGuess_result() throw();
  GuessInfo success;

  _Pose3DAnnPreprocess_DoInitGuess_result__isset __isset;

  void __set_success(const GuessInfo& val);

  bool operator == (const Pose3DAnnPreprocess_DoInitGuess_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Pose3DAnnPreprocess_DoInitGuess_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Pose3DAnnPreprocess_DoInitGuess_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Pose3DAnnPreprocess_DoInitGuess_presult__isset {
  _Pose3DAnnPreprocess_DoInitGuess_presult__isset() : success(false) {}
  bool success :1;
} _Pose3DAnnPreprocess_DoInitGuess_presult__isset;

class Pose3DAnnPreprocess_DoInitGuess_presult {
 public:


  virtual ~Pose3DAnnPreprocess_DoInitGuess_presult() throw();
  GuessInfo* success;

  _Pose3DAnnPreprocess_DoInitGuess_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Pose3DAnnPreprocess_AutoCalPose3D_args__isset {
  _Pose3DAnnPreprocess_AutoCalPose3D_args__isset() : img(false), guessInfo(false) {}
  bool img :1;
  bool guessInfo :1;
} _Pose3DAnnPreprocess_AutoCalPose3D_args__isset;

class Pose3DAnnPreprocess_AutoCalPose3D_args {
 public:

  Pose3DAnnPreprocess_AutoCalPose3D_args(const Pose3DAnnPreprocess_AutoCalPose3D_args&);
  Pose3DAnnPreprocess_AutoCalPose3D_args& operator=(const Pose3DAnnPreprocess_AutoCalPose3D_args&);
  Pose3DAnnPreprocess_AutoCalPose3D_args() {
  }

  virtual ~Pose3DAnnPreprocess_AutoCalPose3D_args() throw();
  Image img;
  GuessInfo guessInfo;

  _Pose3DAnnPreprocess_AutoCalPose3D_args__isset __isset;

  void __set_img(const Image& val);

  void __set_guessInfo(const GuessInfo& val);

  bool operator == (const Pose3DAnnPreprocess_AutoCalPose3D_args & rhs) const
  {
    if (!(img == rhs.img))
      return false;
    if (!(guessInfo == rhs.guessInfo))
      return false;
    return true;
  }
  bool operator != (const Pose3DAnnPreprocess_AutoCalPose3D_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Pose3DAnnPreprocess_AutoCalPose3D_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Pose3DAnnPreprocess_AutoCalPose3D_pargs {
 public:


  virtual ~Pose3DAnnPreprocess_AutoCalPose3D_pargs() throw();
  const Image* img;
  const GuessInfo* guessInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Pose3DAnnPreprocess_AutoCalPose3D_result__isset {
  _Pose3DAnnPreprocess_AutoCalPose3D_result__isset() : success(false) {}
  bool success :1;
} _Pose3DAnnPreprocess_AutoCalPose3D_result__isset;

class Pose3DAnnPreprocess_AutoCalPose3D_result {
 public:

  Pose3DAnnPreprocess_AutoCalPose3D_result(const Pose3DAnnPreprocess_AutoCalPose3D_result&);
  Pose3DAnnPreprocess_AutoCalPose3D_result& operator=(const Pose3DAnnPreprocess_AutoCalPose3D_result&);
  Pose3DAnnPreprocess_AutoCalPose3D_result() {
  }

  virtual ~Pose3DAnnPreprocess_AutoCalPose3D_result() throw();
  std::vector<HumanPose3DInfo>  success;

  _Pose3DAnnPreprocess_AutoCalPose3D_result__isset __isset;

  void __set_success(const std::vector<HumanPose3DInfo> & val);

  bool operator == (const Pose3DAnnPreprocess_AutoCalPose3D_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Pose3DAnnPreprocess_AutoCalPose3D_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Pose3DAnnPreprocess_AutoCalPose3D_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Pose3DAnnPreprocess_AutoCalPose3D_presult__isset {
  _Pose3DAnnPreprocess_AutoCalPose3D_presult__isset() : success(false) {}
  bool success :1;
} _Pose3DAnnPreprocess_AutoCalPose3D_presult__isset;

class Pose3DAnnPreprocess_AutoCalPose3D_presult {
 public:


  virtual ~Pose3DAnnPreprocess_AutoCalPose3D_presult() throw();
  std::vector<HumanPose3DInfo> * success;

  _Pose3DAnnPreprocess_AutoCalPose3D_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class Pose3DAnnPreprocessClient : virtual public Pose3DAnnPreprocessIf {
 public:
  Pose3DAnnPreprocessClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  Pose3DAnnPreprocessClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void CheckIsValid(ImageInitData& _return, const Image& img);
  void send_CheckIsValid(const Image& img);
  void recv_CheckIsValid(ImageInitData& _return);
  void DoInitGuess(GuessInfo& _return, const Image& img);
  void send_DoInitGuess(const Image& img);
  void recv_DoInitGuess(GuessInfo& _return);
  void AutoCalPose3D(std::vector<HumanPose3DInfo> & _return, const Image& img, const GuessInfo& guessInfo);
  void send_AutoCalPose3D(const Image& img, const GuessInfo& guessInfo);
  void recv_AutoCalPose3D(std::vector<HumanPose3DInfo> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class Pose3DAnnPreprocessProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<Pose3DAnnPreprocessIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (Pose3DAnnPreprocessProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_CheckIsValid(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DoInitGuess(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_AutoCalPose3D(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  Pose3DAnnPreprocessProcessor(boost::shared_ptr<Pose3DAnnPreprocessIf> iface) :
    iface_(iface) {
    processMap_["CheckIsValid"] = &Pose3DAnnPreprocessProcessor::process_CheckIsValid;
    processMap_["DoInitGuess"] = &Pose3DAnnPreprocessProcessor::process_DoInitGuess;
    processMap_["AutoCalPose3D"] = &Pose3DAnnPreprocessProcessor::process_AutoCalPose3D;
  }

  virtual ~Pose3DAnnPreprocessProcessor() {}
};

class Pose3DAnnPreprocessProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  Pose3DAnnPreprocessProcessorFactory(const ::boost::shared_ptr< Pose3DAnnPreprocessIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< Pose3DAnnPreprocessIfFactory > handlerFactory_;
};

class Pose3DAnnPreprocessMultiface : virtual public Pose3DAnnPreprocessIf {
 public:
  Pose3DAnnPreprocessMultiface(std::vector<boost::shared_ptr<Pose3DAnnPreprocessIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~Pose3DAnnPreprocessMultiface() {}
 protected:
  std::vector<boost::shared_ptr<Pose3DAnnPreprocessIf> > ifaces_;
  Pose3DAnnPreprocessMultiface() {}
  void add(boost::shared_ptr<Pose3DAnnPreprocessIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void CheckIsValid(ImageInitData& _return, const Image& img) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CheckIsValid(_return, img);
    }
    ifaces_[i]->CheckIsValid(_return, img);
    return;
  }

  void DoInitGuess(GuessInfo& _return, const Image& img) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DoInitGuess(_return, img);
    }
    ifaces_[i]->DoInitGuess(_return, img);
    return;
  }

  void AutoCalPose3D(std::vector<HumanPose3DInfo> & _return, const Image& img, const GuessInfo& guessInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AutoCalPose3D(_return, img, guessInfo);
    }
    ifaces_[i]->AutoCalPose3D(_return, img, guessInfo);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class Pose3DAnnPreprocessConcurrentClient : virtual public Pose3DAnnPreprocessIf {
 public:
  Pose3DAnnPreprocessConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  Pose3DAnnPreprocessConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void CheckIsValid(ImageInitData& _return, const Image& img);
  int32_t send_CheckIsValid(const Image& img);
  void recv_CheckIsValid(ImageInitData& _return, const int32_t seqid);
  void DoInitGuess(GuessInfo& _return, const Image& img);
  int32_t send_DoInitGuess(const Image& img);
  void recv_DoInitGuess(GuessInfo& _return, const int32_t seqid);
  void AutoCalPose3D(std::vector<HumanPose3DInfo> & _return, const Image& img, const GuessInfo& guessInfo);
  int32_t send_AutoCalPose3D(const Image& img, const GuessInfo& guessInfo);
  void recv_AutoCalPose3D(std::vector<HumanPose3DInfo> & _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
