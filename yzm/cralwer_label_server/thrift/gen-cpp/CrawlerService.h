/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CrawlerService_H
#define CrawlerService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "pose_label_types.h"

namespace server { namespace pose_label {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class CrawlerServiceIf {
 public:
  virtual ~CrawlerServiceIf() {}
  virtual void UploadRequest(ReturnVals& _return, const std::string& md5) = 0;
  virtual void PicUpload(ReturnVals& _return, const PicInfo& pic) = 0;
};

class CrawlerServiceIfFactory {
 public:
  typedef CrawlerServiceIf Handler;

  virtual ~CrawlerServiceIfFactory() {}

  virtual CrawlerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CrawlerServiceIf* /* handler */) = 0;
};

class CrawlerServiceIfSingletonFactory : virtual public CrawlerServiceIfFactory {
 public:
  CrawlerServiceIfSingletonFactory(const boost::shared_ptr<CrawlerServiceIf>& iface) : iface_(iface) {}
  virtual ~CrawlerServiceIfSingletonFactory() {}

  virtual CrawlerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CrawlerServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<CrawlerServiceIf> iface_;
};

class CrawlerServiceNull : virtual public CrawlerServiceIf {
 public:
  virtual ~CrawlerServiceNull() {}
  void UploadRequest(ReturnVals& /* _return */, const std::string& /* md5 */) {
    return;
  }
  void PicUpload(ReturnVals& /* _return */, const PicInfo& /* pic */) {
    return;
  }
};

typedef struct _CrawlerService_UploadRequest_args__isset {
  _CrawlerService_UploadRequest_args__isset() : md5(false) {}
  bool md5 :1;
} _CrawlerService_UploadRequest_args__isset;

class CrawlerService_UploadRequest_args {
 public:

  CrawlerService_UploadRequest_args(const CrawlerService_UploadRequest_args&);
  CrawlerService_UploadRequest_args& operator=(const CrawlerService_UploadRequest_args&);
  CrawlerService_UploadRequest_args() : md5() {
  }

  virtual ~CrawlerService_UploadRequest_args() throw();
  std::string md5;

  _CrawlerService_UploadRequest_args__isset __isset;

  void __set_md5(const std::string& val);

  bool operator == (const CrawlerService_UploadRequest_args & rhs) const
  {
    if (!(md5 == rhs.md5))
      return false;
    return true;
  }
  bool operator != (const CrawlerService_UploadRequest_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CrawlerService_UploadRequest_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CrawlerService_UploadRequest_pargs {
 public:


  virtual ~CrawlerService_UploadRequest_pargs() throw();
  const std::string* md5;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CrawlerService_UploadRequest_result__isset {
  _CrawlerService_UploadRequest_result__isset() : success(false) {}
  bool success :1;
} _CrawlerService_UploadRequest_result__isset;

class CrawlerService_UploadRequest_result {
 public:

  CrawlerService_UploadRequest_result(const CrawlerService_UploadRequest_result&);
  CrawlerService_UploadRequest_result& operator=(const CrawlerService_UploadRequest_result&);
  CrawlerService_UploadRequest_result() {
  }

  virtual ~CrawlerService_UploadRequest_result() throw();
  ReturnVals success;

  _CrawlerService_UploadRequest_result__isset __isset;

  void __set_success(const ReturnVals& val);

  bool operator == (const CrawlerService_UploadRequest_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CrawlerService_UploadRequest_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CrawlerService_UploadRequest_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CrawlerService_UploadRequest_presult__isset {
  _CrawlerService_UploadRequest_presult__isset() : success(false) {}
  bool success :1;
} _CrawlerService_UploadRequest_presult__isset;

class CrawlerService_UploadRequest_presult {
 public:


  virtual ~CrawlerService_UploadRequest_presult() throw();
  ReturnVals* success;

  _CrawlerService_UploadRequest_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CrawlerService_PicUpload_args__isset {
  _CrawlerService_PicUpload_args__isset() : pic(false) {}
  bool pic :1;
} _CrawlerService_PicUpload_args__isset;

class CrawlerService_PicUpload_args {
 public:

  CrawlerService_PicUpload_args(const CrawlerService_PicUpload_args&);
  CrawlerService_PicUpload_args& operator=(const CrawlerService_PicUpload_args&);
  CrawlerService_PicUpload_args() {
  }

  virtual ~CrawlerService_PicUpload_args() throw();
  PicInfo pic;

  _CrawlerService_PicUpload_args__isset __isset;

  void __set_pic(const PicInfo& val);

  bool operator == (const CrawlerService_PicUpload_args & rhs) const
  {
    if (!(pic == rhs.pic))
      return false;
    return true;
  }
  bool operator != (const CrawlerService_PicUpload_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CrawlerService_PicUpload_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CrawlerService_PicUpload_pargs {
 public:


  virtual ~CrawlerService_PicUpload_pargs() throw();
  const PicInfo* pic;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CrawlerService_PicUpload_result__isset {
  _CrawlerService_PicUpload_result__isset() : success(false) {}
  bool success :1;
} _CrawlerService_PicUpload_result__isset;

class CrawlerService_PicUpload_result {
 public:

  CrawlerService_PicUpload_result(const CrawlerService_PicUpload_result&);
  CrawlerService_PicUpload_result& operator=(const CrawlerService_PicUpload_result&);
  CrawlerService_PicUpload_result() {
  }

  virtual ~CrawlerService_PicUpload_result() throw();
  ReturnVals success;

  _CrawlerService_PicUpload_result__isset __isset;

  void __set_success(const ReturnVals& val);

  bool operator == (const CrawlerService_PicUpload_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CrawlerService_PicUpload_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CrawlerService_PicUpload_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CrawlerService_PicUpload_presult__isset {
  _CrawlerService_PicUpload_presult__isset() : success(false) {}
  bool success :1;
} _CrawlerService_PicUpload_presult__isset;

class CrawlerService_PicUpload_presult {
 public:


  virtual ~CrawlerService_PicUpload_presult() throw();
  ReturnVals* success;

  _CrawlerService_PicUpload_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CrawlerServiceClient : virtual public CrawlerServiceIf {
 public:
  CrawlerServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CrawlerServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void UploadRequest(ReturnVals& _return, const std::string& md5);
  void send_UploadRequest(const std::string& md5);
  void recv_UploadRequest(ReturnVals& _return);
  void PicUpload(ReturnVals& _return, const PicInfo& pic);
  void send_PicUpload(const PicInfo& pic);
  void recv_PicUpload(ReturnVals& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CrawlerServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<CrawlerServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CrawlerServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_UploadRequest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PicUpload(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CrawlerServiceProcessor(boost::shared_ptr<CrawlerServiceIf> iface) :
    iface_(iface) {
    processMap_["UploadRequest"] = &CrawlerServiceProcessor::process_UploadRequest;
    processMap_["PicUpload"] = &CrawlerServiceProcessor::process_PicUpload;
  }

  virtual ~CrawlerServiceProcessor() {}
};

class CrawlerServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CrawlerServiceProcessorFactory(const ::boost::shared_ptr< CrawlerServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< CrawlerServiceIfFactory > handlerFactory_;
};

class CrawlerServiceMultiface : virtual public CrawlerServiceIf {
 public:
  CrawlerServiceMultiface(std::vector<boost::shared_ptr<CrawlerServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CrawlerServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<CrawlerServiceIf> > ifaces_;
  CrawlerServiceMultiface() {}
  void add(boost::shared_ptr<CrawlerServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void UploadRequest(ReturnVals& _return, const std::string& md5) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UploadRequest(_return, md5);
    }
    ifaces_[i]->UploadRequest(_return, md5);
    return;
  }

  void PicUpload(ReturnVals& _return, const PicInfo& pic) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PicUpload(_return, pic);
    }
    ifaces_[i]->PicUpload(_return, pic);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class CrawlerServiceConcurrentClient : virtual public CrawlerServiceIf {
 public:
  CrawlerServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CrawlerServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void UploadRequest(ReturnVals& _return, const std::string& md5);
  int32_t send_UploadRequest(const std::string& md5);
  void recv_UploadRequest(ReturnVals& _return, const int32_t seqid);
  void PicUpload(ReturnVals& _return, const PicInfo& pic);
  int32_t send_PicUpload(const PicInfo& pic);
  void recv_PicUpload(ReturnVals& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#endif
