/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DataService_H
#define DataService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "pose_label_types.h"

namespace server { namespace pose_label {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class DataServiceIf {
 public:
  virtual ~DataServiceIf() {}
  virtual void UploadRequest(ReturnVals& _return, const std::string& md5) = 0;
  virtual void PicUpload(ReturnVals& _return, const PicInfo& pic, const double percent, const int32_t sumTotal) = 0;
};

class DataServiceIfFactory {
 public:
  typedef DataServiceIf Handler;

  virtual ~DataServiceIfFactory() {}

  virtual DataServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DataServiceIf* /* handler */) = 0;
};

class DataServiceIfSingletonFactory : virtual public DataServiceIfFactory {
 public:
  DataServiceIfSingletonFactory(const boost::shared_ptr<DataServiceIf>& iface) : iface_(iface) {}
  virtual ~DataServiceIfSingletonFactory() {}

  virtual DataServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DataServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<DataServiceIf> iface_;
};

class DataServiceNull : virtual public DataServiceIf {
 public:
  virtual ~DataServiceNull() {}
  void UploadRequest(ReturnVals& /* _return */, const std::string& /* md5 */) {
    return;
  }
  void PicUpload(ReturnVals& /* _return */, const PicInfo& /* pic */, const double /* percent */, const int32_t /* sumTotal */) {
    return;
  }
};

typedef struct _DataService_UploadRequest_args__isset {
  _DataService_UploadRequest_args__isset() : md5(false) {}
  bool md5 :1;
} _DataService_UploadRequest_args__isset;

class DataService_UploadRequest_args {
 public:

  DataService_UploadRequest_args(const DataService_UploadRequest_args&);
  DataService_UploadRequest_args& operator=(const DataService_UploadRequest_args&);
  DataService_UploadRequest_args() : md5() {
  }

  virtual ~DataService_UploadRequest_args() throw();
  std::string md5;

  _DataService_UploadRequest_args__isset __isset;

  void __set_md5(const std::string& val);

  bool operator == (const DataService_UploadRequest_args & rhs) const
  {
    if (!(md5 == rhs.md5))
      return false;
    return true;
  }
  bool operator != (const DataService_UploadRequest_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataService_UploadRequest_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataService_UploadRequest_pargs {
 public:


  virtual ~DataService_UploadRequest_pargs() throw();
  const std::string* md5;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataService_UploadRequest_result__isset {
  _DataService_UploadRequest_result__isset() : success(false) {}
  bool success :1;
} _DataService_UploadRequest_result__isset;

class DataService_UploadRequest_result {
 public:

  DataService_UploadRequest_result(const DataService_UploadRequest_result&);
  DataService_UploadRequest_result& operator=(const DataService_UploadRequest_result&);
  DataService_UploadRequest_result() {
  }

  virtual ~DataService_UploadRequest_result() throw();
  ReturnVals success;

  _DataService_UploadRequest_result__isset __isset;

  void __set_success(const ReturnVals& val);

  bool operator == (const DataService_UploadRequest_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataService_UploadRequest_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataService_UploadRequest_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataService_UploadRequest_presult__isset {
  _DataService_UploadRequest_presult__isset() : success(false) {}
  bool success :1;
} _DataService_UploadRequest_presult__isset;

class DataService_UploadRequest_presult {
 public:


  virtual ~DataService_UploadRequest_presult() throw();
  ReturnVals* success;

  _DataService_UploadRequest_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataService_PicUpload_args__isset {
  _DataService_PicUpload_args__isset() : pic(false), percent(false), sumTotal(false) {}
  bool pic :1;
  bool percent :1;
  bool sumTotal :1;
} _DataService_PicUpload_args__isset;

class DataService_PicUpload_args {
 public:

  DataService_PicUpload_args(const DataService_PicUpload_args&);
  DataService_PicUpload_args& operator=(const DataService_PicUpload_args&);
  DataService_PicUpload_args() : percent(0), sumTotal(0) {
  }

  virtual ~DataService_PicUpload_args() throw();
  PicInfo pic;
  double percent;
  int32_t sumTotal;

  _DataService_PicUpload_args__isset __isset;

  void __set_pic(const PicInfo& val);

  void __set_percent(const double val);

  void __set_sumTotal(const int32_t val);

  bool operator == (const DataService_PicUpload_args & rhs) const
  {
    if (!(pic == rhs.pic))
      return false;
    if (!(percent == rhs.percent))
      return false;
    if (!(sumTotal == rhs.sumTotal))
      return false;
    return true;
  }
  bool operator != (const DataService_PicUpload_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataService_PicUpload_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataService_PicUpload_pargs {
 public:


  virtual ~DataService_PicUpload_pargs() throw();
  const PicInfo* pic;
  const double* percent;
  const int32_t* sumTotal;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataService_PicUpload_result__isset {
  _DataService_PicUpload_result__isset() : success(false) {}
  bool success :1;
} _DataService_PicUpload_result__isset;

class DataService_PicUpload_result {
 public:

  DataService_PicUpload_result(const DataService_PicUpload_result&);
  DataService_PicUpload_result& operator=(const DataService_PicUpload_result&);
  DataService_PicUpload_result() {
  }

  virtual ~DataService_PicUpload_result() throw();
  ReturnVals success;

  _DataService_PicUpload_result__isset __isset;

  void __set_success(const ReturnVals& val);

  bool operator == (const DataService_PicUpload_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataService_PicUpload_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataService_PicUpload_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataService_PicUpload_presult__isset {
  _DataService_PicUpload_presult__isset() : success(false) {}
  bool success :1;
} _DataService_PicUpload_presult__isset;

class DataService_PicUpload_presult {
 public:


  virtual ~DataService_PicUpload_presult() throw();
  ReturnVals* success;

  _DataService_PicUpload_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DataServiceClient : virtual public DataServiceIf {
 public:
  DataServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DataServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void UploadRequest(ReturnVals& _return, const std::string& md5);
  void send_UploadRequest(const std::string& md5);
  void recv_UploadRequest(ReturnVals& _return);
  void PicUpload(ReturnVals& _return, const PicInfo& pic, const double percent, const int32_t sumTotal);
  void send_PicUpload(const PicInfo& pic, const double percent, const int32_t sumTotal);
  void recv_PicUpload(ReturnVals& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DataServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<DataServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DataServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_UploadRequest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PicUpload(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DataServiceProcessor(boost::shared_ptr<DataServiceIf> iface) :
    iface_(iface) {
    processMap_["UploadRequest"] = &DataServiceProcessor::process_UploadRequest;
    processMap_["PicUpload"] = &DataServiceProcessor::process_PicUpload;
  }

  virtual ~DataServiceProcessor() {}
};

class DataServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DataServiceProcessorFactory(const ::boost::shared_ptr< DataServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DataServiceIfFactory > handlerFactory_;
};

class DataServiceMultiface : virtual public DataServiceIf {
 public:
  DataServiceMultiface(std::vector<boost::shared_ptr<DataServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DataServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DataServiceIf> > ifaces_;
  DataServiceMultiface() {}
  void add(boost::shared_ptr<DataServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void UploadRequest(ReturnVals& _return, const std::string& md5) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UploadRequest(_return, md5);
    }
    ifaces_[i]->UploadRequest(_return, md5);
    return;
  }

  void PicUpload(ReturnVals& _return, const PicInfo& pic, const double percent, const int32_t sumTotal) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PicUpload(_return, pic, percent, sumTotal);
    }
    ifaces_[i]->PicUpload(_return, pic, percent, sumTotal);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class DataServiceConcurrentClient : virtual public DataServiceIf {
 public:
  DataServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DataServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void UploadRequest(ReturnVals& _return, const std::string& md5);
  int32_t send_UploadRequest(const std::string& md5);
  void recv_UploadRequest(ReturnVals& _return, const int32_t seqid);
  void PicUpload(ReturnVals& _return, const PicInfo& pic, const double percent, const int32_t sumTotal);
  int32_t send_PicUpload(const PicInfo& pic, const double percent, const int32_t sumTotal);
  void recv_PicUpload(ReturnVals& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#endif
