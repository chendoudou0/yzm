/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CrawlerClientService_H
#define CrawlerClientService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "pose_label_types.h"

namespace server { namespace pose_label {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class CrawlerClientServiceIf {
 public:
  virtual ~CrawlerClientServiceIf() {}
  virtual void UploadRequest(ReturnVals& _return, const std::string& md5) = 0;
  virtual void PicUpload(ReturnVals& _return, const PicInfo& pic) = 0;
  virtual void start(ReturnVals& _return, const std::string& keyword, const std::string& website, const std::string& tag) = 0;
  virtual void InquireCrawlerStatus(CrawlerStatusRet& _return) = 0;
  virtual void stop(ReturnVals& _return) = 0;
  virtual void QueryCrawlingHistory(CrawlerHistoryRet& _return, const HistoryQueryCondition& qc) = 0;
  virtual void QueryCrawleredPic(CrawleredPicRet& _return, const QueryConditions& qc, const int32_t index) = 0;
  virtual void UpdatePicInfo(ReturnVals& _return, const int32_t pic_id, const std::string& tag, const std::string& pose_type) = 0;
};

class CrawlerClientServiceIfFactory {
 public:
  typedef CrawlerClientServiceIf Handler;

  virtual ~CrawlerClientServiceIfFactory() {}

  virtual CrawlerClientServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CrawlerClientServiceIf* /* handler */) = 0;
};

class CrawlerClientServiceIfSingletonFactory : virtual public CrawlerClientServiceIfFactory {
 public:
  CrawlerClientServiceIfSingletonFactory(const boost::shared_ptr<CrawlerClientServiceIf>& iface) : iface_(iface) {}
  virtual ~CrawlerClientServiceIfSingletonFactory() {}

  virtual CrawlerClientServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CrawlerClientServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<CrawlerClientServiceIf> iface_;
};

class CrawlerClientServiceNull : virtual public CrawlerClientServiceIf {
 public:
  virtual ~CrawlerClientServiceNull() {}
  void UploadRequest(ReturnVals& /* _return */, const std::string& /* md5 */) {
    return;
  }
  void PicUpload(ReturnVals& /* _return */, const PicInfo& /* pic */) {
    return;
  }
  void start(ReturnVals& /* _return */, const std::string& /* keyword */, const std::string& /* website */, const std::string& /* tag */) {
    return;
  }
  void InquireCrawlerStatus(CrawlerStatusRet& /* _return */) {
    return;
  }
  void stop(ReturnVals& /* _return */) {
    return;
  }
  void QueryCrawlingHistory(CrawlerHistoryRet& /* _return */, const HistoryQueryCondition& /* qc */) {
    return;
  }
  void QueryCrawleredPic(CrawleredPicRet& /* _return */, const QueryConditions& /* qc */, const int32_t /* index */) {
    return;
  }
  void UpdatePicInfo(ReturnVals& /* _return */, const int32_t /* pic_id */, const std::string& /* tag */, const std::string& /* pose_type */) {
    return;
  }
};

typedef struct _CrawlerClientService_UploadRequest_args__isset {
  _CrawlerClientService_UploadRequest_args__isset() : md5(false) {}
  bool md5 :1;
} _CrawlerClientService_UploadRequest_args__isset;

class CrawlerClientService_UploadRequest_args {
 public:

  CrawlerClientService_UploadRequest_args(const CrawlerClientService_UploadRequest_args&);
  CrawlerClientService_UploadRequest_args& operator=(const CrawlerClientService_UploadRequest_args&);
  CrawlerClientService_UploadRequest_args() : md5() {
  }

  virtual ~CrawlerClientService_UploadRequest_args() throw();
  std::string md5;

  _CrawlerClientService_UploadRequest_args__isset __isset;

  void __set_md5(const std::string& val);

  bool operator == (const CrawlerClientService_UploadRequest_args & rhs) const
  {
    if (!(md5 == rhs.md5))
      return false;
    return true;
  }
  bool operator != (const CrawlerClientService_UploadRequest_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CrawlerClientService_UploadRequest_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CrawlerClientService_UploadRequest_pargs {
 public:


  virtual ~CrawlerClientService_UploadRequest_pargs() throw();
  const std::string* md5;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CrawlerClientService_UploadRequest_result__isset {
  _CrawlerClientService_UploadRequest_result__isset() : success(false) {}
  bool success :1;
} _CrawlerClientService_UploadRequest_result__isset;

class CrawlerClientService_UploadRequest_result {
 public:

  CrawlerClientService_UploadRequest_result(const CrawlerClientService_UploadRequest_result&);
  CrawlerClientService_UploadRequest_result& operator=(const CrawlerClientService_UploadRequest_result&);
  CrawlerClientService_UploadRequest_result() {
  }

  virtual ~CrawlerClientService_UploadRequest_result() throw();
  ReturnVals success;

  _CrawlerClientService_UploadRequest_result__isset __isset;

  void __set_success(const ReturnVals& val);

  bool operator == (const CrawlerClientService_UploadRequest_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CrawlerClientService_UploadRequest_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CrawlerClientService_UploadRequest_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CrawlerClientService_UploadRequest_presult__isset {
  _CrawlerClientService_UploadRequest_presult__isset() : success(false) {}
  bool success :1;
} _CrawlerClientService_UploadRequest_presult__isset;

class CrawlerClientService_UploadRequest_presult {
 public:


  virtual ~CrawlerClientService_UploadRequest_presult() throw();
  ReturnVals* success;

  _CrawlerClientService_UploadRequest_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CrawlerClientService_PicUpload_args__isset {
  _CrawlerClientService_PicUpload_args__isset() : pic(false) {}
  bool pic :1;
} _CrawlerClientService_PicUpload_args__isset;

class CrawlerClientService_PicUpload_args {
 public:

  CrawlerClientService_PicUpload_args(const CrawlerClientService_PicUpload_args&);
  CrawlerClientService_PicUpload_args& operator=(const CrawlerClientService_PicUpload_args&);
  CrawlerClientService_PicUpload_args() {
  }

  virtual ~CrawlerClientService_PicUpload_args() throw();
  PicInfo pic;

  _CrawlerClientService_PicUpload_args__isset __isset;

  void __set_pic(const PicInfo& val);

  bool operator == (const CrawlerClientService_PicUpload_args & rhs) const
  {
    if (!(pic == rhs.pic))
      return false;
    return true;
  }
  bool operator != (const CrawlerClientService_PicUpload_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CrawlerClientService_PicUpload_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CrawlerClientService_PicUpload_pargs {
 public:


  virtual ~CrawlerClientService_PicUpload_pargs() throw();
  const PicInfo* pic;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CrawlerClientService_PicUpload_result__isset {
  _CrawlerClientService_PicUpload_result__isset() : success(false) {}
  bool success :1;
} _CrawlerClientService_PicUpload_result__isset;

class CrawlerClientService_PicUpload_result {
 public:

  CrawlerClientService_PicUpload_result(const CrawlerClientService_PicUpload_result&);
  CrawlerClientService_PicUpload_result& operator=(const CrawlerClientService_PicUpload_result&);
  CrawlerClientService_PicUpload_result() {
  }

  virtual ~CrawlerClientService_PicUpload_result() throw();
  ReturnVals success;

  _CrawlerClientService_PicUpload_result__isset __isset;

  void __set_success(const ReturnVals& val);

  bool operator == (const CrawlerClientService_PicUpload_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CrawlerClientService_PicUpload_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CrawlerClientService_PicUpload_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CrawlerClientService_PicUpload_presult__isset {
  _CrawlerClientService_PicUpload_presult__isset() : success(false) {}
  bool success :1;
} _CrawlerClientService_PicUpload_presult__isset;

class CrawlerClientService_PicUpload_presult {
 public:


  virtual ~CrawlerClientService_PicUpload_presult() throw();
  ReturnVals* success;

  _CrawlerClientService_PicUpload_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CrawlerClientService_start_args__isset {
  _CrawlerClientService_start_args__isset() : keyword(false), website(false), tag(false) {}
  bool keyword :1;
  bool website :1;
  bool tag :1;
} _CrawlerClientService_start_args__isset;

class CrawlerClientService_start_args {
 public:

  CrawlerClientService_start_args(const CrawlerClientService_start_args&);
  CrawlerClientService_start_args& operator=(const CrawlerClientService_start_args&);
  CrawlerClientService_start_args() : keyword(), website(), tag() {
  }

  virtual ~CrawlerClientService_start_args() throw();
  std::string keyword;
  std::string website;
  std::string tag;

  _CrawlerClientService_start_args__isset __isset;

  void __set_keyword(const std::string& val);

  void __set_website(const std::string& val);

  void __set_tag(const std::string& val);

  bool operator == (const CrawlerClientService_start_args & rhs) const
  {
    if (!(keyword == rhs.keyword))
      return false;
    if (!(website == rhs.website))
      return false;
    if (!(tag == rhs.tag))
      return false;
    return true;
  }
  bool operator != (const CrawlerClientService_start_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CrawlerClientService_start_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CrawlerClientService_start_pargs {
 public:


  virtual ~CrawlerClientService_start_pargs() throw();
  const std::string* keyword;
  const std::string* website;
  const std::string* tag;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CrawlerClientService_start_result__isset {
  _CrawlerClientService_start_result__isset() : success(false) {}
  bool success :1;
} _CrawlerClientService_start_result__isset;

class CrawlerClientService_start_result {
 public:

  CrawlerClientService_start_result(const CrawlerClientService_start_result&);
  CrawlerClientService_start_result& operator=(const CrawlerClientService_start_result&);
  CrawlerClientService_start_result() {
  }

  virtual ~CrawlerClientService_start_result() throw();
  ReturnVals success;

  _CrawlerClientService_start_result__isset __isset;

  void __set_success(const ReturnVals& val);

  bool operator == (const CrawlerClientService_start_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CrawlerClientService_start_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CrawlerClientService_start_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CrawlerClientService_start_presult__isset {
  _CrawlerClientService_start_presult__isset() : success(false) {}
  bool success :1;
} _CrawlerClientService_start_presult__isset;

class CrawlerClientService_start_presult {
 public:


  virtual ~CrawlerClientService_start_presult() throw();
  ReturnVals* success;

  _CrawlerClientService_start_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CrawlerClientService_InquireCrawlerStatus_args {
 public:

  CrawlerClientService_InquireCrawlerStatus_args(const CrawlerClientService_InquireCrawlerStatus_args&);
  CrawlerClientService_InquireCrawlerStatus_args& operator=(const CrawlerClientService_InquireCrawlerStatus_args&);
  CrawlerClientService_InquireCrawlerStatus_args() {
  }

  virtual ~CrawlerClientService_InquireCrawlerStatus_args() throw();

  bool operator == (const CrawlerClientService_InquireCrawlerStatus_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CrawlerClientService_InquireCrawlerStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CrawlerClientService_InquireCrawlerStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CrawlerClientService_InquireCrawlerStatus_pargs {
 public:


  virtual ~CrawlerClientService_InquireCrawlerStatus_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CrawlerClientService_InquireCrawlerStatus_result__isset {
  _CrawlerClientService_InquireCrawlerStatus_result__isset() : success(false) {}
  bool success :1;
} _CrawlerClientService_InquireCrawlerStatus_result__isset;

class CrawlerClientService_InquireCrawlerStatus_result {
 public:

  CrawlerClientService_InquireCrawlerStatus_result(const CrawlerClientService_InquireCrawlerStatus_result&);
  CrawlerClientService_InquireCrawlerStatus_result& operator=(const CrawlerClientService_InquireCrawlerStatus_result&);
  CrawlerClientService_InquireCrawlerStatus_result() {
  }

  virtual ~CrawlerClientService_InquireCrawlerStatus_result() throw();
  CrawlerStatusRet success;

  _CrawlerClientService_InquireCrawlerStatus_result__isset __isset;

  void __set_success(const CrawlerStatusRet& val);

  bool operator == (const CrawlerClientService_InquireCrawlerStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CrawlerClientService_InquireCrawlerStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CrawlerClientService_InquireCrawlerStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CrawlerClientService_InquireCrawlerStatus_presult__isset {
  _CrawlerClientService_InquireCrawlerStatus_presult__isset() : success(false) {}
  bool success :1;
} _CrawlerClientService_InquireCrawlerStatus_presult__isset;

class CrawlerClientService_InquireCrawlerStatus_presult {
 public:


  virtual ~CrawlerClientService_InquireCrawlerStatus_presult() throw();
  CrawlerStatusRet* success;

  _CrawlerClientService_InquireCrawlerStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class CrawlerClientService_stop_args {
 public:

  CrawlerClientService_stop_args(const CrawlerClientService_stop_args&);
  CrawlerClientService_stop_args& operator=(const CrawlerClientService_stop_args&);
  CrawlerClientService_stop_args() {
  }

  virtual ~CrawlerClientService_stop_args() throw();

  bool operator == (const CrawlerClientService_stop_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CrawlerClientService_stop_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CrawlerClientService_stop_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CrawlerClientService_stop_pargs {
 public:


  virtual ~CrawlerClientService_stop_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CrawlerClientService_stop_result__isset {
  _CrawlerClientService_stop_result__isset() : success(false) {}
  bool success :1;
} _CrawlerClientService_stop_result__isset;

class CrawlerClientService_stop_result {
 public:

  CrawlerClientService_stop_result(const CrawlerClientService_stop_result&);
  CrawlerClientService_stop_result& operator=(const CrawlerClientService_stop_result&);
  CrawlerClientService_stop_result() {
  }

  virtual ~CrawlerClientService_stop_result() throw();
  ReturnVals success;

  _CrawlerClientService_stop_result__isset __isset;

  void __set_success(const ReturnVals& val);

  bool operator == (const CrawlerClientService_stop_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CrawlerClientService_stop_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CrawlerClientService_stop_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CrawlerClientService_stop_presult__isset {
  _CrawlerClientService_stop_presult__isset() : success(false) {}
  bool success :1;
} _CrawlerClientService_stop_presult__isset;

class CrawlerClientService_stop_presult {
 public:


  virtual ~CrawlerClientService_stop_presult() throw();
  ReturnVals* success;

  _CrawlerClientService_stop_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CrawlerClientService_QueryCrawlingHistory_args__isset {
  _CrawlerClientService_QueryCrawlingHistory_args__isset() : qc(false) {}
  bool qc :1;
} _CrawlerClientService_QueryCrawlingHistory_args__isset;

class CrawlerClientService_QueryCrawlingHistory_args {
 public:

  CrawlerClientService_QueryCrawlingHistory_args(const CrawlerClientService_QueryCrawlingHistory_args&);
  CrawlerClientService_QueryCrawlingHistory_args& operator=(const CrawlerClientService_QueryCrawlingHistory_args&);
  CrawlerClientService_QueryCrawlingHistory_args() {
  }

  virtual ~CrawlerClientService_QueryCrawlingHistory_args() throw();
  HistoryQueryCondition qc;

  _CrawlerClientService_QueryCrawlingHistory_args__isset __isset;

  void __set_qc(const HistoryQueryCondition& val);

  bool operator == (const CrawlerClientService_QueryCrawlingHistory_args & rhs) const
  {
    if (!(qc == rhs.qc))
      return false;
    return true;
  }
  bool operator != (const CrawlerClientService_QueryCrawlingHistory_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CrawlerClientService_QueryCrawlingHistory_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CrawlerClientService_QueryCrawlingHistory_pargs {
 public:


  virtual ~CrawlerClientService_QueryCrawlingHistory_pargs() throw();
  const HistoryQueryCondition* qc;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CrawlerClientService_QueryCrawlingHistory_result__isset {
  _CrawlerClientService_QueryCrawlingHistory_result__isset() : success(false) {}
  bool success :1;
} _CrawlerClientService_QueryCrawlingHistory_result__isset;

class CrawlerClientService_QueryCrawlingHistory_result {
 public:

  CrawlerClientService_QueryCrawlingHistory_result(const CrawlerClientService_QueryCrawlingHistory_result&);
  CrawlerClientService_QueryCrawlingHistory_result& operator=(const CrawlerClientService_QueryCrawlingHistory_result&);
  CrawlerClientService_QueryCrawlingHistory_result() {
  }

  virtual ~CrawlerClientService_QueryCrawlingHistory_result() throw();
  CrawlerHistoryRet success;

  _CrawlerClientService_QueryCrawlingHistory_result__isset __isset;

  void __set_success(const CrawlerHistoryRet& val);

  bool operator == (const CrawlerClientService_QueryCrawlingHistory_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CrawlerClientService_QueryCrawlingHistory_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CrawlerClientService_QueryCrawlingHistory_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CrawlerClientService_QueryCrawlingHistory_presult__isset {
  _CrawlerClientService_QueryCrawlingHistory_presult__isset() : success(false) {}
  bool success :1;
} _CrawlerClientService_QueryCrawlingHistory_presult__isset;

class CrawlerClientService_QueryCrawlingHistory_presult {
 public:


  virtual ~CrawlerClientService_QueryCrawlingHistory_presult() throw();
  CrawlerHistoryRet* success;

  _CrawlerClientService_QueryCrawlingHistory_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CrawlerClientService_QueryCrawleredPic_args__isset {
  _CrawlerClientService_QueryCrawleredPic_args__isset() : qc(false), index(false) {}
  bool qc :1;
  bool index :1;
} _CrawlerClientService_QueryCrawleredPic_args__isset;

class CrawlerClientService_QueryCrawleredPic_args {
 public:

  CrawlerClientService_QueryCrawleredPic_args(const CrawlerClientService_QueryCrawleredPic_args&);
  CrawlerClientService_QueryCrawleredPic_args& operator=(const CrawlerClientService_QueryCrawleredPic_args&);
  CrawlerClientService_QueryCrawleredPic_args() : index(0) {
  }

  virtual ~CrawlerClientService_QueryCrawleredPic_args() throw();
  QueryConditions qc;
  int32_t index;

  _CrawlerClientService_QueryCrawleredPic_args__isset __isset;

  void __set_qc(const QueryConditions& val);

  void __set_index(const int32_t val);

  bool operator == (const CrawlerClientService_QueryCrawleredPic_args & rhs) const
  {
    if (!(qc == rhs.qc))
      return false;
    if (!(index == rhs.index))
      return false;
    return true;
  }
  bool operator != (const CrawlerClientService_QueryCrawleredPic_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CrawlerClientService_QueryCrawleredPic_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CrawlerClientService_QueryCrawleredPic_pargs {
 public:


  virtual ~CrawlerClientService_QueryCrawleredPic_pargs() throw();
  const QueryConditions* qc;
  const int32_t* index;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CrawlerClientService_QueryCrawleredPic_result__isset {
  _CrawlerClientService_QueryCrawleredPic_result__isset() : success(false) {}
  bool success :1;
} _CrawlerClientService_QueryCrawleredPic_result__isset;

class CrawlerClientService_QueryCrawleredPic_result {
 public:

  CrawlerClientService_QueryCrawleredPic_result(const CrawlerClientService_QueryCrawleredPic_result&);
  CrawlerClientService_QueryCrawleredPic_result& operator=(const CrawlerClientService_QueryCrawleredPic_result&);
  CrawlerClientService_QueryCrawleredPic_result() {
  }

  virtual ~CrawlerClientService_QueryCrawleredPic_result() throw();
  CrawleredPicRet success;

  _CrawlerClientService_QueryCrawleredPic_result__isset __isset;

  void __set_success(const CrawleredPicRet& val);

  bool operator == (const CrawlerClientService_QueryCrawleredPic_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CrawlerClientService_QueryCrawleredPic_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CrawlerClientService_QueryCrawleredPic_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CrawlerClientService_QueryCrawleredPic_presult__isset {
  _CrawlerClientService_QueryCrawleredPic_presult__isset() : success(false) {}
  bool success :1;
} _CrawlerClientService_QueryCrawleredPic_presult__isset;

class CrawlerClientService_QueryCrawleredPic_presult {
 public:


  virtual ~CrawlerClientService_QueryCrawleredPic_presult() throw();
  CrawleredPicRet* success;

  _CrawlerClientService_QueryCrawleredPic_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CrawlerClientService_UpdatePicInfo_args__isset {
  _CrawlerClientService_UpdatePicInfo_args__isset() : pic_id(false), tag(false), pose_type(false) {}
  bool pic_id :1;
  bool tag :1;
  bool pose_type :1;
} _CrawlerClientService_UpdatePicInfo_args__isset;

class CrawlerClientService_UpdatePicInfo_args {
 public:

  CrawlerClientService_UpdatePicInfo_args(const CrawlerClientService_UpdatePicInfo_args&);
  CrawlerClientService_UpdatePicInfo_args& operator=(const CrawlerClientService_UpdatePicInfo_args&);
  CrawlerClientService_UpdatePicInfo_args() : pic_id(0), tag(), pose_type() {
  }

  virtual ~CrawlerClientService_UpdatePicInfo_args() throw();
  int32_t pic_id;
  std::string tag;
  std::string pose_type;

  _CrawlerClientService_UpdatePicInfo_args__isset __isset;

  void __set_pic_id(const int32_t val);

  void __set_tag(const std::string& val);

  void __set_pose_type(const std::string& val);

  bool operator == (const CrawlerClientService_UpdatePicInfo_args & rhs) const
  {
    if (!(pic_id == rhs.pic_id))
      return false;
    if (!(tag == rhs.tag))
      return false;
    if (!(pose_type == rhs.pose_type))
      return false;
    return true;
  }
  bool operator != (const CrawlerClientService_UpdatePicInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CrawlerClientService_UpdatePicInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CrawlerClientService_UpdatePicInfo_pargs {
 public:


  virtual ~CrawlerClientService_UpdatePicInfo_pargs() throw();
  const int32_t* pic_id;
  const std::string* tag;
  const std::string* pose_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CrawlerClientService_UpdatePicInfo_result__isset {
  _CrawlerClientService_UpdatePicInfo_result__isset() : success(false) {}
  bool success :1;
} _CrawlerClientService_UpdatePicInfo_result__isset;

class CrawlerClientService_UpdatePicInfo_result {
 public:

  CrawlerClientService_UpdatePicInfo_result(const CrawlerClientService_UpdatePicInfo_result&);
  CrawlerClientService_UpdatePicInfo_result& operator=(const CrawlerClientService_UpdatePicInfo_result&);
  CrawlerClientService_UpdatePicInfo_result() {
  }

  virtual ~CrawlerClientService_UpdatePicInfo_result() throw();
  ReturnVals success;

  _CrawlerClientService_UpdatePicInfo_result__isset __isset;

  void __set_success(const ReturnVals& val);

  bool operator == (const CrawlerClientService_UpdatePicInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CrawlerClientService_UpdatePicInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CrawlerClientService_UpdatePicInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CrawlerClientService_UpdatePicInfo_presult__isset {
  _CrawlerClientService_UpdatePicInfo_presult__isset() : success(false) {}
  bool success :1;
} _CrawlerClientService_UpdatePicInfo_presult__isset;

class CrawlerClientService_UpdatePicInfo_presult {
 public:


  virtual ~CrawlerClientService_UpdatePicInfo_presult() throw();
  ReturnVals* success;

  _CrawlerClientService_UpdatePicInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CrawlerClientServiceClient : virtual public CrawlerClientServiceIf {
 public:
  CrawlerClientServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CrawlerClientServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void UploadRequest(ReturnVals& _return, const std::string& md5);
  void send_UploadRequest(const std::string& md5);
  void recv_UploadRequest(ReturnVals& _return);
  void PicUpload(ReturnVals& _return, const PicInfo& pic);
  void send_PicUpload(const PicInfo& pic);
  void recv_PicUpload(ReturnVals& _return);
  void start(ReturnVals& _return, const std::string& keyword, const std::string& website, const std::string& tag);
  void send_start(const std::string& keyword, const std::string& website, const std::string& tag);
  void recv_start(ReturnVals& _return);
  void InquireCrawlerStatus(CrawlerStatusRet& _return);
  void send_InquireCrawlerStatus();
  void recv_InquireCrawlerStatus(CrawlerStatusRet& _return);
  void stop(ReturnVals& _return);
  void send_stop();
  void recv_stop(ReturnVals& _return);
  void QueryCrawlingHistory(CrawlerHistoryRet& _return, const HistoryQueryCondition& qc);
  void send_QueryCrawlingHistory(const HistoryQueryCondition& qc);
  void recv_QueryCrawlingHistory(CrawlerHistoryRet& _return);
  void QueryCrawleredPic(CrawleredPicRet& _return, const QueryConditions& qc, const int32_t index);
  void send_QueryCrawleredPic(const QueryConditions& qc, const int32_t index);
  void recv_QueryCrawleredPic(CrawleredPicRet& _return);
  void UpdatePicInfo(ReturnVals& _return, const int32_t pic_id, const std::string& tag, const std::string& pose_type);
  void send_UpdatePicInfo(const int32_t pic_id, const std::string& tag, const std::string& pose_type);
  void recv_UpdatePicInfo(ReturnVals& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CrawlerClientServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<CrawlerClientServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CrawlerClientServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_UploadRequest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PicUpload(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_start(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_InquireCrawlerStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_QueryCrawlingHistory(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_QueryCrawleredPic(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdatePicInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CrawlerClientServiceProcessor(boost::shared_ptr<CrawlerClientServiceIf> iface) :
    iface_(iface) {
    processMap_["UploadRequest"] = &CrawlerClientServiceProcessor::process_UploadRequest;
    processMap_["PicUpload"] = &CrawlerClientServiceProcessor::process_PicUpload;
    processMap_["start"] = &CrawlerClientServiceProcessor::process_start;
    processMap_["InquireCrawlerStatus"] = &CrawlerClientServiceProcessor::process_InquireCrawlerStatus;
    processMap_["stop"] = &CrawlerClientServiceProcessor::process_stop;
    processMap_["QueryCrawlingHistory"] = &CrawlerClientServiceProcessor::process_QueryCrawlingHistory;
    processMap_["QueryCrawleredPic"] = &CrawlerClientServiceProcessor::process_QueryCrawleredPic;
    processMap_["UpdatePicInfo"] = &CrawlerClientServiceProcessor::process_UpdatePicInfo;
  }

  virtual ~CrawlerClientServiceProcessor() {}
};

class CrawlerClientServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CrawlerClientServiceProcessorFactory(const ::boost::shared_ptr< CrawlerClientServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< CrawlerClientServiceIfFactory > handlerFactory_;
};

class CrawlerClientServiceMultiface : virtual public CrawlerClientServiceIf {
 public:
  CrawlerClientServiceMultiface(std::vector<boost::shared_ptr<CrawlerClientServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CrawlerClientServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<CrawlerClientServiceIf> > ifaces_;
  CrawlerClientServiceMultiface() {}
  void add(boost::shared_ptr<CrawlerClientServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void UploadRequest(ReturnVals& _return, const std::string& md5) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UploadRequest(_return, md5);
    }
    ifaces_[i]->UploadRequest(_return, md5);
    return;
  }

  void PicUpload(ReturnVals& _return, const PicInfo& pic) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PicUpload(_return, pic);
    }
    ifaces_[i]->PicUpload(_return, pic);
    return;
  }

  void start(ReturnVals& _return, const std::string& keyword, const std::string& website, const std::string& tag) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->start(_return, keyword, website, tag);
    }
    ifaces_[i]->start(_return, keyword, website, tag);
    return;
  }

  void InquireCrawlerStatus(CrawlerStatusRet& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->InquireCrawlerStatus(_return);
    }
    ifaces_[i]->InquireCrawlerStatus(_return);
    return;
  }

  void stop(ReturnVals& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->stop(_return);
    }
    ifaces_[i]->stop(_return);
    return;
  }

  void QueryCrawlingHistory(CrawlerHistoryRet& _return, const HistoryQueryCondition& qc) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->QueryCrawlingHistory(_return, qc);
    }
    ifaces_[i]->QueryCrawlingHistory(_return, qc);
    return;
  }

  void QueryCrawleredPic(CrawleredPicRet& _return, const QueryConditions& qc, const int32_t index) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->QueryCrawleredPic(_return, qc, index);
    }
    ifaces_[i]->QueryCrawleredPic(_return, qc, index);
    return;
  }

  void UpdatePicInfo(ReturnVals& _return, const int32_t pic_id, const std::string& tag, const std::string& pose_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdatePicInfo(_return, pic_id, tag, pose_type);
    }
    ifaces_[i]->UpdatePicInfo(_return, pic_id, tag, pose_type);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class CrawlerClientServiceConcurrentClient : virtual public CrawlerClientServiceIf {
 public:
  CrawlerClientServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CrawlerClientServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void UploadRequest(ReturnVals& _return, const std::string& md5);
  int32_t send_UploadRequest(const std::string& md5);
  void recv_UploadRequest(ReturnVals& _return, const int32_t seqid);
  void PicUpload(ReturnVals& _return, const PicInfo& pic);
  int32_t send_PicUpload(const PicInfo& pic);
  void recv_PicUpload(ReturnVals& _return, const int32_t seqid);
  void start(ReturnVals& _return, const std::string& keyword, const std::string& website, const std::string& tag);
  int32_t send_start(const std::string& keyword, const std::string& website, const std::string& tag);
  void recv_start(ReturnVals& _return, const int32_t seqid);
  void InquireCrawlerStatus(CrawlerStatusRet& _return);
  int32_t send_InquireCrawlerStatus();
  void recv_InquireCrawlerStatus(CrawlerStatusRet& _return, const int32_t seqid);
  void stop(ReturnVals& _return);
  int32_t send_stop();
  void recv_stop(ReturnVals& _return, const int32_t seqid);
  void QueryCrawlingHistory(CrawlerHistoryRet& _return, const HistoryQueryCondition& qc);
  int32_t send_QueryCrawlingHistory(const HistoryQueryCondition& qc);
  void recv_QueryCrawlingHistory(CrawlerHistoryRet& _return, const int32_t seqid);
  void QueryCrawleredPic(CrawleredPicRet& _return, const QueryConditions& qc, const int32_t index);
  int32_t send_QueryCrawleredPic(const QueryConditions& qc, const int32_t index);
  void recv_QueryCrawleredPic(CrawleredPicRet& _return, const int32_t seqid);
  void UpdatePicInfo(ReturnVals& _return, const int32_t pic_id, const std::string& tag, const std::string& pose_type);
  int32_t send_UpdatePicInfo(const int32_t pic_id, const std::string& tag, const std::string& pose_type);
  void recv_UpdatePicInfo(ReturnVals& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#endif
