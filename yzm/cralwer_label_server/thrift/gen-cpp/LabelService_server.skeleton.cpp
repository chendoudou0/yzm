// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "LabelService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::server::pose_label;

class LabelServiceHandler : virtual public LabelServiceIf {
 public:
  LabelServiceHandler() {
    // Your initialization goes here
  }

  void QueryUnlabeledPic(QueryUnlabeledRet& _return, const std::string& user, const int32_t index) {
    // Your implementation goes here
    printf("QueryUnlabeledPic\n");
  }

  void QueryPicLabeledByOthers(QueryLabeledRet& _return, const std::string& user, const int32_t index) {
    // Your implementation goes here
    printf("QueryPicLabeledByOthers\n");
  }

  void QueryLabeledPic(QueryLabeledRet& _return, const std::string& user, const int32_t index) {
    // Your implementation goes here
    printf("QueryLabeledPic\n");
  }

  void DownloadPic(DownloadRet& _return, const std::string& pic_url) {
    // Your implementation goes here
    printf("DownloadPic\n");
  }

  void InsertToDb(ReturnVals& _return, const std::string& poseInfo, const int32_t pic_id, const std::string& userName) {
    // Your implementation goes here
    printf("InsertToDb\n");
  }

  void InvalidatePicture(ReturnVals& _return, const int32_t pic_id, const std::string& userName, const bool type) {
    // Your implementation goes here
    printf("InvalidatePicture\n");
  }

  void QueryLabeledPoseData(LabeledPoseDataRet& _return, const int32_t pic_id, const std::string& pic_url, const std::string& userName) {
    // Your implementation goes here
    printf("QueryLabeledPoseData\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<LabelServiceHandler> handler(new LabelServiceHandler());
  shared_ptr<TProcessor> processor(new LabelServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

