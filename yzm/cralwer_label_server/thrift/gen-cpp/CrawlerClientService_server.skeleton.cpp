// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "CrawlerClientService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::server::pose_label;

class CrawlerClientServiceHandler : virtual public CrawlerClientServiceIf {
 public:
  CrawlerClientServiceHandler() {
    // Your initialization goes here
  }

  void UploadRequest(ReturnVals& _return, const std::string& md5) {
    // Your implementation goes here
    printf("UploadRequest\n");
  }

  void PicUpload(ReturnVals& _return, const PicInfo& pic) {
    // Your implementation goes here
    printf("PicUpload\n");
  }

  void start(ReturnVals& _return, const std::string& keyword, const std::string& website, const std::string& tag) {
    // Your implementation goes here
    printf("start\n");
  }

  void InquireCrawlerStatus(CrawlerStatusRet& _return) {
    // Your implementation goes here
    printf("InquireCrawlerStatus\n");
  }

  void stop(ReturnVals& _return) {
    // Your implementation goes here
    printf("stop\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<CrawlerClientServiceHandler> handler(new CrawlerClientServiceHandler());
  shared_ptr<TProcessor> processor(new CrawlerClientServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

