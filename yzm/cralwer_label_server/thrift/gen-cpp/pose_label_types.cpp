/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "pose_label_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace server { namespace pose_label {


ReturnVals::~ReturnVals() throw() {
}


void ReturnVals::__set_code(const int32_t val) {
  this->code = val;
}

void ReturnVals::__set_msg(const std::string& val) {
  this->msg = val;
}
std::ostream& operator<<(std::ostream& out, const ReturnVals& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ReturnVals::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->msg);
          this->__isset.msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReturnVals::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ReturnVals");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ReturnVals &a, ReturnVals &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.msg, b.msg);
  swap(a.__isset, b.__isset);
}

ReturnVals::ReturnVals(const ReturnVals& other0) {
  code = other0.code;
  msg = other0.msg;
  __isset = other0.__isset;
}
ReturnVals& ReturnVals::operator=(const ReturnVals& other1) {
  code = other1.code;
  msg = other1.msg;
  __isset = other1.__isset;
  return *this;
}
void ReturnVals::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ReturnVals(";
  out << "code=" << to_string(code);
  out << ", " << "msg=" << to_string(msg);
  out << ")";
}


PicInfo::~PicInfo() throw() {
}


void PicInfo::__set_oriBin(const std::string& val) {
  this->oriBin = val;
}

void PicInfo::__set_md5(const std::string& val) {
  this->md5 = val;
}

void PicInfo::__set_key(const std::string& val) {
  this->key = val;
}

void PicInfo::__set_tag(const std::string& val) {
  this->tag = val;
}
std::ostream& operator<<(std::ostream& out, const PicInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PicInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->oriBin);
          this->__isset.oriBin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->md5);
          this->__isset.md5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tag);
          this->__isset.tag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PicInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PicInfo");

  xfer += oprot->writeFieldBegin("oriBin", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->oriBin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("md5", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->md5);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tag", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->tag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PicInfo &a, PicInfo &b) {
  using ::std::swap;
  swap(a.oriBin, b.oriBin);
  swap(a.md5, b.md5);
  swap(a.key, b.key);
  swap(a.tag, b.tag);
  swap(a.__isset, b.__isset);
}

PicInfo::PicInfo(const PicInfo& other2) {
  oriBin = other2.oriBin;
  md5 = other2.md5;
  key = other2.key;
  tag = other2.tag;
  __isset = other2.__isset;
}
PicInfo& PicInfo::operator=(const PicInfo& other3) {
  oriBin = other3.oriBin;
  md5 = other3.md5;
  key = other3.key;
  tag = other3.tag;
  __isset = other3.__isset;
  return *this;
}
void PicInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PicInfo(";
  out << "oriBin=" << to_string(oriBin);
  out << ", " << "md5=" << to_string(md5);
  out << ", " << "key=" << to_string(key);
  out << ", " << "tag=" << to_string(tag);
  out << ")";
}


QueryUnlabeledRet::~QueryUnlabeledRet() throw() {
}


void QueryUnlabeledRet::__set_code(const int32_t val) {
  this->code = val;
}

void QueryUnlabeledRet::__set_msg(const std::string& val) {
  this->msg = val;
}

void QueryUnlabeledRet::__set_picJson(const std::string& val) {
  this->picJson = val;
}
std::ostream& operator<<(std::ostream& out, const QueryUnlabeledRet& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t QueryUnlabeledRet::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->msg);
          this->__isset.msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->picJson);
          this->__isset.picJson = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t QueryUnlabeledRet::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("QueryUnlabeledRet");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("picJson", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->picJson);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(QueryUnlabeledRet &a, QueryUnlabeledRet &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.msg, b.msg);
  swap(a.picJson, b.picJson);
  swap(a.__isset, b.__isset);
}

QueryUnlabeledRet::QueryUnlabeledRet(const QueryUnlabeledRet& other4) {
  code = other4.code;
  msg = other4.msg;
  picJson = other4.picJson;
  __isset = other4.__isset;
}
QueryUnlabeledRet& QueryUnlabeledRet::operator=(const QueryUnlabeledRet& other5) {
  code = other5.code;
  msg = other5.msg;
  picJson = other5.picJson;
  __isset = other5.__isset;
  return *this;
}
void QueryUnlabeledRet::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "QueryUnlabeledRet(";
  out << "code=" << to_string(code);
  out << ", " << "msg=" << to_string(msg);
  out << ", " << "picJson=" << to_string(picJson);
  out << ")";
}


DownloadRet::~DownloadRet() throw() {
}


void DownloadRet::__set_code(const int32_t val) {
  this->code = val;
}

void DownloadRet::__set_msg(const std::string& val) {
  this->msg = val;
}

void DownloadRet::__set_bin(const std::string& val) {
  this->bin = val;
}

void DownloadRet::__set_HumanPose2DInfo(const std::string& val) {
  this->HumanPose2DInfo = val;
}

void DownloadRet::__set_HumanPose3DInfo(const std::string& val) {
  this->HumanPose3DInfo = val;
}
std::ostream& operator<<(std::ostream& out, const DownloadRet& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DownloadRet::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->msg);
          this->__isset.msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->bin);
          this->__isset.bin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->HumanPose2DInfo);
          this->__isset.HumanPose2DInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->HumanPose3DInfo);
          this->__isset.HumanPose3DInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DownloadRet::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DownloadRet");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bin", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->bin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("HumanPose2DInfo", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->HumanPose2DInfo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("HumanPose3DInfo", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->HumanPose3DInfo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DownloadRet &a, DownloadRet &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.msg, b.msg);
  swap(a.bin, b.bin);
  swap(a.HumanPose2DInfo, b.HumanPose2DInfo);
  swap(a.HumanPose3DInfo, b.HumanPose3DInfo);
  swap(a.__isset, b.__isset);
}

DownloadRet::DownloadRet(const DownloadRet& other6) {
  code = other6.code;
  msg = other6.msg;
  bin = other6.bin;
  HumanPose2DInfo = other6.HumanPose2DInfo;
  HumanPose3DInfo = other6.HumanPose3DInfo;
  __isset = other6.__isset;
}
DownloadRet& DownloadRet::operator=(const DownloadRet& other7) {
  code = other7.code;
  msg = other7.msg;
  bin = other7.bin;
  HumanPose2DInfo = other7.HumanPose2DInfo;
  HumanPose3DInfo = other7.HumanPose3DInfo;
  __isset = other7.__isset;
  return *this;
}
void DownloadRet::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DownloadRet(";
  out << "code=" << to_string(code);
  out << ", " << "msg=" << to_string(msg);
  out << ", " << "bin=" << to_string(bin);
  out << ", " << "HumanPose2DInfo=" << to_string(HumanPose2DInfo);
  out << ", " << "HumanPose3DInfo=" << to_string(HumanPose3DInfo);
  out << ")";
}

}} // namespace
