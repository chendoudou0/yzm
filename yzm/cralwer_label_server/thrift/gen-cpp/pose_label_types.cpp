/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "pose_label_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace server { namespace pose_label {


ReturnVals::~ReturnVals() throw() {
}


void ReturnVals::__set_code(const int32_t val) {
  this->code = val;
}

void ReturnVals::__set_msg(const std::string& val) {
  this->msg = val;
}
std::ostream& operator<<(std::ostream& out, const ReturnVals& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ReturnVals::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->msg);
          this->__isset.msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReturnVals::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ReturnVals");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ReturnVals &a, ReturnVals &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.msg, b.msg);
  swap(a.__isset, b.__isset);
}

ReturnVals::ReturnVals(const ReturnVals& other0) {
  code = other0.code;
  msg = other0.msg;
  __isset = other0.__isset;
}
ReturnVals& ReturnVals::operator=(const ReturnVals& other1) {
  code = other1.code;
  msg = other1.msg;
  __isset = other1.__isset;
  return *this;
}
void ReturnVals::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ReturnVals(";
  out << "code=" << to_string(code);
  out << ", " << "msg=" << to_string(msg);
  out << ")";
}


PicInfo::~PicInfo() throw() {
}


void PicInfo::__set_oriBin(const std::string& val) {
  this->oriBin = val;
}

void PicInfo::__set_filename(const std::string& val) {
  this->filename = val;
}

void PicInfo::__set_md5(const std::string& val) {
  this->md5 = val;
}

void PicInfo::__set_key(const std::string& val) {
  this->key = val;
}

void PicInfo::__set_tag(const std::string& val) {
  this->tag = val;
}

void PicInfo::__set_ori_url(const std::string& val) {
  this->ori_url = val;
}

void PicInfo::__set_website(const std::string& val) {
  this->website = val;
}
std::ostream& operator<<(std::ostream& out, const PicInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PicInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->oriBin);
          this->__isset.oriBin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->filename);
          this->__isset.filename = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->md5);
          this->__isset.md5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tag);
          this->__isset.tag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ori_url);
          this->__isset.ori_url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->website);
          this->__isset.website = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PicInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PicInfo");

  xfer += oprot->writeFieldBegin("oriBin", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->oriBin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("filename", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->filename);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("md5", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->md5);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tag", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->tag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ori_url", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->ori_url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("website", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->website);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PicInfo &a, PicInfo &b) {
  using ::std::swap;
  swap(a.oriBin, b.oriBin);
  swap(a.filename, b.filename);
  swap(a.md5, b.md5);
  swap(a.key, b.key);
  swap(a.tag, b.tag);
  swap(a.ori_url, b.ori_url);
  swap(a.website, b.website);
  swap(a.__isset, b.__isset);
}

PicInfo::PicInfo(const PicInfo& other2) {
  oriBin = other2.oriBin;
  filename = other2.filename;
  md5 = other2.md5;
  key = other2.key;
  tag = other2.tag;
  ori_url = other2.ori_url;
  website = other2.website;
  __isset = other2.__isset;
}
PicInfo& PicInfo::operator=(const PicInfo& other3) {
  oriBin = other3.oriBin;
  filename = other3.filename;
  md5 = other3.md5;
  key = other3.key;
  tag = other3.tag;
  ori_url = other3.ori_url;
  website = other3.website;
  __isset = other3.__isset;
  return *this;
}
void PicInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PicInfo(";
  out << "oriBin=" << to_string(oriBin);
  out << ", " << "filename=" << to_string(filename);
  out << ", " << "md5=" << to_string(md5);
  out << ", " << "key=" << to_string(key);
  out << ", " << "tag=" << to_string(tag);
  out << ", " << "ori_url=" << to_string(ori_url);
  out << ", " << "website=" << to_string(website);
  out << ")";
}


CrawlerStatus::~CrawlerStatus() throw() {
}


void CrawlerStatus::__set_totalPicSum(const int32_t val) {
  this->totalPicSum = val;
}

void CrawlerStatus::__set_dbPicSum(const int32_t val) {
  this->dbPicSum = val;
}
std::ostream& operator<<(std::ostream& out, const CrawlerStatus& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CrawlerStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totalPicSum);
          this->__isset.totalPicSum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->dbPicSum);
          this->__isset.dbPicSum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CrawlerStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CrawlerStatus");

  xfer += oprot->writeFieldBegin("totalPicSum", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->totalPicSum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dbPicSum", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->dbPicSum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CrawlerStatus &a, CrawlerStatus &b) {
  using ::std::swap;
  swap(a.totalPicSum, b.totalPicSum);
  swap(a.dbPicSum, b.dbPicSum);
  swap(a.__isset, b.__isset);
}

CrawlerStatus::CrawlerStatus(const CrawlerStatus& other4) {
  totalPicSum = other4.totalPicSum;
  dbPicSum = other4.dbPicSum;
  __isset = other4.__isset;
}
CrawlerStatus& CrawlerStatus::operator=(const CrawlerStatus& other5) {
  totalPicSum = other5.totalPicSum;
  dbPicSum = other5.dbPicSum;
  __isset = other5.__isset;
  return *this;
}
void CrawlerStatus::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CrawlerStatus(";
  out << "totalPicSum=" << to_string(totalPicSum);
  out << ", " << "dbPicSum=" << to_string(dbPicSum);
  out << ")";
}


CrawlerStatusRet::~CrawlerStatusRet() throw() {
}


void CrawlerStatusRet::__set_code(const int32_t val) {
  this->code = val;
}

void CrawlerStatusRet::__set_msg(const std::string& val) {
  this->msg = val;
}

void CrawlerStatusRet::__set_crawlerStatus(const CrawlerStatus& val) {
  this->crawlerStatus = val;
}
std::ostream& operator<<(std::ostream& out, const CrawlerStatusRet& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CrawlerStatusRet::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->msg);
          this->__isset.msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->crawlerStatus.read(iprot);
          this->__isset.crawlerStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CrawlerStatusRet::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CrawlerStatusRet");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("crawlerStatus", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->crawlerStatus.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CrawlerStatusRet &a, CrawlerStatusRet &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.msg, b.msg);
  swap(a.crawlerStatus, b.crawlerStatus);
  swap(a.__isset, b.__isset);
}

CrawlerStatusRet::CrawlerStatusRet(const CrawlerStatusRet& other6) {
  code = other6.code;
  msg = other6.msg;
  crawlerStatus = other6.crawlerStatus;
  __isset = other6.__isset;
}
CrawlerStatusRet& CrawlerStatusRet::operator=(const CrawlerStatusRet& other7) {
  code = other7.code;
  msg = other7.msg;
  crawlerStatus = other7.crawlerStatus;
  __isset = other7.__isset;
  return *this;
}
void CrawlerStatusRet::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CrawlerStatusRet(";
  out << "code=" << to_string(code);
  out << ", " << "msg=" << to_string(msg);
  out << ", " << "crawlerStatus=" << to_string(crawlerStatus);
  out << ")";
}


CrawlingResult::~CrawlingResult() throw() {
}


void CrawlingResult::__set_key(const std::string& val) {
  this->key = val;
}

void CrawlingResult::__set_tag(const std::string& val) {
  this->tag = val;
}

void CrawlingResult::__set_sumTotal(const int32_t val) {
  this->sumTotal = val;
}

void CrawlingResult::__set_tBegin(const std::string& val) {
  this->tBegin = val;
}

void CrawlingResult::__set_tEnd(const std::string& val) {
  this->tEnd = val;
}
std::ostream& operator<<(std::ostream& out, const CrawlingResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CrawlingResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tag);
          this->__isset.tag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sumTotal);
          this->__isset.sumTotal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tBegin);
          this->__isset.tBegin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tEnd);
          this->__isset.tEnd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CrawlingResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CrawlingResult");

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tag", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sumTotal", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->sumTotal);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tBegin", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->tBegin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tEnd", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->tEnd);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CrawlingResult &a, CrawlingResult &b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.tag, b.tag);
  swap(a.sumTotal, b.sumTotal);
  swap(a.tBegin, b.tBegin);
  swap(a.tEnd, b.tEnd);
  swap(a.__isset, b.__isset);
}

CrawlingResult::CrawlingResult(const CrawlingResult& other8) {
  key = other8.key;
  tag = other8.tag;
  sumTotal = other8.sumTotal;
  tBegin = other8.tBegin;
  tEnd = other8.tEnd;
  __isset = other8.__isset;
}
CrawlingResult& CrawlingResult::operator=(const CrawlingResult& other9) {
  key = other9.key;
  tag = other9.tag;
  sumTotal = other9.sumTotal;
  tBegin = other9.tBegin;
  tEnd = other9.tEnd;
  __isset = other9.__isset;
  return *this;
}
void CrawlingResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CrawlingResult(";
  out << "key=" << to_string(key);
  out << ", " << "tag=" << to_string(tag);
  out << ", " << "sumTotal=" << to_string(sumTotal);
  out << ", " << "tBegin=" << to_string(tBegin);
  out << ", " << "tEnd=" << to_string(tEnd);
  out << ")";
}


HistoryQueryCondition::~HistoryQueryCondition() throw() {
}


void HistoryQueryCondition::__set_key(const std::string& val) {
  this->key = val;
}

void HistoryQueryCondition::__set_tag(const std::string& val) {
  this->tag = val;
}
std::ostream& operator<<(std::ostream& out, const HistoryQueryCondition& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t HistoryQueryCondition::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tag);
          this->__isset.tag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HistoryQueryCondition::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HistoryQueryCondition");

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tag", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HistoryQueryCondition &a, HistoryQueryCondition &b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.tag, b.tag);
  swap(a.__isset, b.__isset);
}

HistoryQueryCondition::HistoryQueryCondition(const HistoryQueryCondition& other10) {
  key = other10.key;
  tag = other10.tag;
  __isset = other10.__isset;
}
HistoryQueryCondition& HistoryQueryCondition::operator=(const HistoryQueryCondition& other11) {
  key = other11.key;
  tag = other11.tag;
  __isset = other11.__isset;
  return *this;
}
void HistoryQueryCondition::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HistoryQueryCondition(";
  out << "key=" << to_string(key);
  out << ", " << "tag=" << to_string(tag);
  out << ")";
}


CrawlerHistory::~CrawlerHistory() throw() {
}


void CrawlerHistory::__set_key(const std::string& val) {
  this->key = val;
}

void CrawlerHistory::__set_tag(const std::string& val) {
  this->tag = val;
}

void CrawlerHistory::__set_total_sum(const int32_t val) {
  this->total_sum = val;
}

void CrawlerHistory::__set_db_sum(const int32_t val) {
  this->db_sum = val;
}

void CrawlerHistory::__set_time_create(const std::string& val) {
  this->time_create = val;
}
std::ostream& operator<<(std::ostream& out, const CrawlerHistory& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CrawlerHistory::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tag);
          this->__isset.tag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->total_sum);
          this->__isset.total_sum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->db_sum);
          this->__isset.db_sum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->time_create);
          this->__isset.time_create = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CrawlerHistory::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CrawlerHistory");

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tag", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("total_sum", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->total_sum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("db_sum", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->db_sum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("time_create", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->time_create);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CrawlerHistory &a, CrawlerHistory &b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.tag, b.tag);
  swap(a.total_sum, b.total_sum);
  swap(a.db_sum, b.db_sum);
  swap(a.time_create, b.time_create);
  swap(a.__isset, b.__isset);
}

CrawlerHistory::CrawlerHistory(const CrawlerHistory& other12) {
  key = other12.key;
  tag = other12.tag;
  total_sum = other12.total_sum;
  db_sum = other12.db_sum;
  time_create = other12.time_create;
  __isset = other12.__isset;
}
CrawlerHistory& CrawlerHistory::operator=(const CrawlerHistory& other13) {
  key = other13.key;
  tag = other13.tag;
  total_sum = other13.total_sum;
  db_sum = other13.db_sum;
  time_create = other13.time_create;
  __isset = other13.__isset;
  return *this;
}
void CrawlerHistory::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CrawlerHistory(";
  out << "key=" << to_string(key);
  out << ", " << "tag=" << to_string(tag);
  out << ", " << "total_sum=" << to_string(total_sum);
  out << ", " << "db_sum=" << to_string(db_sum);
  out << ", " << "time_create=" << to_string(time_create);
  out << ")";
}


CrawlerHistoryRet::~CrawlerHistoryRet() throw() {
}


void CrawlerHistoryRet::__set_code(const int32_t val) {
  this->code = val;
}

void CrawlerHistoryRet::__set_msg(const std::string& val) {
  this->msg = val;
}

void CrawlerHistoryRet::__set_hisVec(const std::vector<CrawlerHistory> & val) {
  this->hisVec = val;
}
std::ostream& operator<<(std::ostream& out, const CrawlerHistoryRet& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CrawlerHistoryRet::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->msg);
          this->__isset.msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->hisVec.clear();
            uint32_t _size14;
            ::apache::thrift::protocol::TType _etype17;
            xfer += iprot->readListBegin(_etype17, _size14);
            this->hisVec.resize(_size14);
            uint32_t _i18;
            for (_i18 = 0; _i18 < _size14; ++_i18)
            {
              xfer += this->hisVec[_i18].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.hisVec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CrawlerHistoryRet::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CrawlerHistoryRet");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hisVec", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->hisVec.size()));
    std::vector<CrawlerHistory> ::const_iterator _iter19;
    for (_iter19 = this->hisVec.begin(); _iter19 != this->hisVec.end(); ++_iter19)
    {
      xfer += (*_iter19).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CrawlerHistoryRet &a, CrawlerHistoryRet &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.msg, b.msg);
  swap(a.hisVec, b.hisVec);
  swap(a.__isset, b.__isset);
}

CrawlerHistoryRet::CrawlerHistoryRet(const CrawlerHistoryRet& other20) {
  code = other20.code;
  msg = other20.msg;
  hisVec = other20.hisVec;
  __isset = other20.__isset;
}
CrawlerHistoryRet& CrawlerHistoryRet::operator=(const CrawlerHistoryRet& other21) {
  code = other21.code;
  msg = other21.msg;
  hisVec = other21.hisVec;
  __isset = other21.__isset;
  return *this;
}
void CrawlerHistoryRet::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CrawlerHistoryRet(";
  out << "code=" << to_string(code);
  out << ", " << "msg=" << to_string(msg);
  out << ", " << "hisVec=" << to_string(hisVec);
  out << ")";
}


QueryConditions::~QueryConditions() throw() {
}


void QueryConditions::__set_tag(const std::string& val) {
  this->tag = val;
}

void QueryConditions::__set_key(const std::string& val) {
  this->key = val;
}

void QueryConditions::__set_pose_type(const std::string& val) {
  this->pose_type = val;
}

void QueryConditions::__set_website(const std::string& val) {
  this->website = val;
}

void QueryConditions::__set_tBegin(const std::string& val) {
  this->tBegin = val;
}

void QueryConditions::__set_tEnd(const std::string& val) {
  this->tEnd = val;
}
std::ostream& operator<<(std::ostream& out, const QueryConditions& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t QueryConditions::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tag);
          this->__isset.tag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pose_type);
          this->__isset.pose_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->website);
          this->__isset.website = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tBegin);
          this->__isset.tBegin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tEnd);
          this->__isset.tEnd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t QueryConditions::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("QueryConditions");

  xfer += oprot->writeFieldBegin("tag", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->tag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pose_type", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->pose_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("website", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->website);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tBegin", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->tBegin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tEnd", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->tEnd);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(QueryConditions &a, QueryConditions &b) {
  using ::std::swap;
  swap(a.tag, b.tag);
  swap(a.key, b.key);
  swap(a.pose_type, b.pose_type);
  swap(a.website, b.website);
  swap(a.tBegin, b.tBegin);
  swap(a.tEnd, b.tEnd);
  swap(a.__isset, b.__isset);
}

QueryConditions::QueryConditions(const QueryConditions& other22) {
  tag = other22.tag;
  key = other22.key;
  pose_type = other22.pose_type;
  website = other22.website;
  tBegin = other22.tBegin;
  tEnd = other22.tEnd;
  __isset = other22.__isset;
}
QueryConditions& QueryConditions::operator=(const QueryConditions& other23) {
  tag = other23.tag;
  key = other23.key;
  pose_type = other23.pose_type;
  website = other23.website;
  tBegin = other23.tBegin;
  tEnd = other23.tEnd;
  __isset = other23.__isset;
  return *this;
}
void QueryConditions::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "QueryConditions(";
  out << "tag=" << to_string(tag);
  out << ", " << "key=" << to_string(key);
  out << ", " << "pose_type=" << to_string(pose_type);
  out << ", " << "website=" << to_string(website);
  out << ", " << "tBegin=" << to_string(tBegin);
  out << ", " << "tEnd=" << to_string(tEnd);
  out << ")";
}


QueryedPicInfo::~QueryedPicInfo() throw() {
}


void QueryedPicInfo::__set_pic_id(const int32_t val) {
  this->pic_id = val;
}

void QueryedPicInfo::__set_pic_url(const std::string& val) {
  this->pic_url = val;
}

void QueryedPicInfo::__set_tag(const std::string& val) {
  this->tag = val;
}

void QueryedPicInfo::__set_pose_type(const std::string& val) {
  this->pose_type = val;
}

void QueryedPicInfo::__set_create_time(const std::string& val) {
  this->create_time = val;
}

void QueryedPicInfo::__set_labeledCount(const int32_t val) {
  this->labeledCount = val;
}

void QueryedPicInfo::__set_lastLabeledUser(const std::string& val) {
  this->lastLabeledUser = val;
}

void QueryedPicInfo::__set_screenshot_bin(const std::string& val) {
  this->screenshot_bin = val;
}

void QueryedPicInfo::__set_key(const std::string& val) {
  this->key = val;
}

void QueryedPicInfo::__set_website(const std::string& val) {
  this->website = val;
}
std::ostream& operator<<(std::ostream& out, const QueryedPicInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t QueryedPicInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pic_id);
          this->__isset.pic_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pic_url);
          this->__isset.pic_url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tag);
          this->__isset.tag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pose_type);
          this->__isset.pose_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->create_time);
          this->__isset.create_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->labeledCount);
          this->__isset.labeledCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lastLabeledUser);
          this->__isset.lastLabeledUser = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->screenshot_bin);
          this->__isset.screenshot_bin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->website);
          this->__isset.website = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t QueryedPicInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("QueryedPicInfo");

  xfer += oprot->writeFieldBegin("pic_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->pic_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pic_url", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->pic_url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tag", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->tag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pose_type", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->pose_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("create_time", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->create_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("labeledCount", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->labeledCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastLabeledUser", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->lastLabeledUser);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("screenshot_bin", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeBinary(this->screenshot_bin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("website", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->website);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(QueryedPicInfo &a, QueryedPicInfo &b) {
  using ::std::swap;
  swap(a.pic_id, b.pic_id);
  swap(a.pic_url, b.pic_url);
  swap(a.tag, b.tag);
  swap(a.pose_type, b.pose_type);
  swap(a.create_time, b.create_time);
  swap(a.labeledCount, b.labeledCount);
  swap(a.lastLabeledUser, b.lastLabeledUser);
  swap(a.screenshot_bin, b.screenshot_bin);
  swap(a.key, b.key);
  swap(a.website, b.website);
  swap(a.__isset, b.__isset);
}

QueryedPicInfo::QueryedPicInfo(const QueryedPicInfo& other24) {
  pic_id = other24.pic_id;
  pic_url = other24.pic_url;
  tag = other24.tag;
  pose_type = other24.pose_type;
  create_time = other24.create_time;
  labeledCount = other24.labeledCount;
  lastLabeledUser = other24.lastLabeledUser;
  screenshot_bin = other24.screenshot_bin;
  key = other24.key;
  website = other24.website;
  __isset = other24.__isset;
}
QueryedPicInfo& QueryedPicInfo::operator=(const QueryedPicInfo& other25) {
  pic_id = other25.pic_id;
  pic_url = other25.pic_url;
  tag = other25.tag;
  pose_type = other25.pose_type;
  create_time = other25.create_time;
  labeledCount = other25.labeledCount;
  lastLabeledUser = other25.lastLabeledUser;
  screenshot_bin = other25.screenshot_bin;
  key = other25.key;
  website = other25.website;
  __isset = other25.__isset;
  return *this;
}
void QueryedPicInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "QueryedPicInfo(";
  out << "pic_id=" << to_string(pic_id);
  out << ", " << "pic_url=" << to_string(pic_url);
  out << ", " << "tag=" << to_string(tag);
  out << ", " << "pose_type=" << to_string(pose_type);
  out << ", " << "create_time=" << to_string(create_time);
  out << ", " << "labeledCount=" << to_string(labeledCount);
  out << ", " << "lastLabeledUser=" << to_string(lastLabeledUser);
  out << ", " << "screenshot_bin=" << to_string(screenshot_bin);
  out << ", " << "key=" << to_string(key);
  out << ", " << "website=" << to_string(website);
  out << ")";
}


CrawleredPicRet::~CrawleredPicRet() throw() {
}


void CrawleredPicRet::__set_code(const int32_t val) {
  this->code = val;
}

void CrawleredPicRet::__set_msg(const std::string& val) {
  this->msg = val;
}

void CrawleredPicRet::__set_pageNum(const int32_t val) {
  this->pageNum = val;
}

void CrawleredPicRet::__set_picVec(const std::vector<QueryedPicInfo> & val) {
  this->picVec = val;
}
std::ostream& operator<<(std::ostream& out, const CrawleredPicRet& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CrawleredPicRet::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->msg);
          this->__isset.msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pageNum);
          this->__isset.pageNum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->picVec.clear();
            uint32_t _size26;
            ::apache::thrift::protocol::TType _etype29;
            xfer += iprot->readListBegin(_etype29, _size26);
            this->picVec.resize(_size26);
            uint32_t _i30;
            for (_i30 = 0; _i30 < _size26; ++_i30)
            {
              xfer += this->picVec[_i30].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.picVec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CrawleredPicRet::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CrawleredPicRet");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pageNum", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->pageNum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("picVec", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->picVec.size()));
    std::vector<QueryedPicInfo> ::const_iterator _iter31;
    for (_iter31 = this->picVec.begin(); _iter31 != this->picVec.end(); ++_iter31)
    {
      xfer += (*_iter31).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CrawleredPicRet &a, CrawleredPicRet &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.msg, b.msg);
  swap(a.pageNum, b.pageNum);
  swap(a.picVec, b.picVec);
  swap(a.__isset, b.__isset);
}

CrawleredPicRet::CrawleredPicRet(const CrawleredPicRet& other32) {
  code = other32.code;
  msg = other32.msg;
  pageNum = other32.pageNum;
  picVec = other32.picVec;
  __isset = other32.__isset;
}
CrawleredPicRet& CrawleredPicRet::operator=(const CrawleredPicRet& other33) {
  code = other33.code;
  msg = other33.msg;
  pageNum = other33.pageNum;
  picVec = other33.picVec;
  __isset = other33.__isset;
  return *this;
}
void CrawleredPicRet::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CrawleredPicRet(";
  out << "code=" << to_string(code);
  out << ", " << "msg=" << to_string(msg);
  out << ", " << "pageNum=" << to_string(pageNum);
  out << ", " << "picVec=" << to_string(picVec);
  out << ")";
}


QueryLabeledRet::~QueryLabeledRet() throw() {
}


void QueryLabeledRet::__set_code(const int32_t val) {
  this->code = val;
}

void QueryLabeledRet::__set_msg(const std::string& val) {
  this->msg = val;
}

void QueryLabeledRet::__set_pageNum(const int32_t val) {
  this->pageNum = val;
}

void QueryLabeledRet::__set_picVec(const std::vector<QueryedPicInfo> & val) {
  this->picVec = val;
}
std::ostream& operator<<(std::ostream& out, const QueryLabeledRet& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t QueryLabeledRet::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->msg);
          this->__isset.msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pageNum);
          this->__isset.pageNum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->picVec.clear();
            uint32_t _size34;
            ::apache::thrift::protocol::TType _etype37;
            xfer += iprot->readListBegin(_etype37, _size34);
            this->picVec.resize(_size34);
            uint32_t _i38;
            for (_i38 = 0; _i38 < _size34; ++_i38)
            {
              xfer += this->picVec[_i38].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.picVec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t QueryLabeledRet::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("QueryLabeledRet");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pageNum", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->pageNum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("picVec", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->picVec.size()));
    std::vector<QueryedPicInfo> ::const_iterator _iter39;
    for (_iter39 = this->picVec.begin(); _iter39 != this->picVec.end(); ++_iter39)
    {
      xfer += (*_iter39).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(QueryLabeledRet &a, QueryLabeledRet &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.msg, b.msg);
  swap(a.pageNum, b.pageNum);
  swap(a.picVec, b.picVec);
  swap(a.__isset, b.__isset);
}

QueryLabeledRet::QueryLabeledRet(const QueryLabeledRet& other40) {
  code = other40.code;
  msg = other40.msg;
  pageNum = other40.pageNum;
  picVec = other40.picVec;
  __isset = other40.__isset;
}
QueryLabeledRet& QueryLabeledRet::operator=(const QueryLabeledRet& other41) {
  code = other41.code;
  msg = other41.msg;
  pageNum = other41.pageNum;
  picVec = other41.picVec;
  __isset = other41.__isset;
  return *this;
}
void QueryLabeledRet::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "QueryLabeledRet(";
  out << "code=" << to_string(code);
  out << ", " << "msg=" << to_string(msg);
  out << ", " << "pageNum=" << to_string(pageNum);
  out << ", " << "picVec=" << to_string(picVec);
  out << ")";
}


QueryUnlabeledRet::~QueryUnlabeledRet() throw() {
}


void QueryUnlabeledRet::__set_code(const int32_t val) {
  this->code = val;
}

void QueryUnlabeledRet::__set_msg(const std::string& val) {
  this->msg = val;
}

void QueryUnlabeledRet::__set_pageNum(const int32_t val) {
  this->pageNum = val;
}

void QueryUnlabeledRet::__set_picVec(const std::vector<QueryedPicInfo> & val) {
  this->picVec = val;
}
std::ostream& operator<<(std::ostream& out, const QueryUnlabeledRet& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t QueryUnlabeledRet::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->msg);
          this->__isset.msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pageNum);
          this->__isset.pageNum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->picVec.clear();
            uint32_t _size42;
            ::apache::thrift::protocol::TType _etype45;
            xfer += iprot->readListBegin(_etype45, _size42);
            this->picVec.resize(_size42);
            uint32_t _i46;
            for (_i46 = 0; _i46 < _size42; ++_i46)
            {
              xfer += this->picVec[_i46].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.picVec = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t QueryUnlabeledRet::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("QueryUnlabeledRet");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pageNum", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->pageNum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("picVec", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->picVec.size()));
    std::vector<QueryedPicInfo> ::const_iterator _iter47;
    for (_iter47 = this->picVec.begin(); _iter47 != this->picVec.end(); ++_iter47)
    {
      xfer += (*_iter47).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(QueryUnlabeledRet &a, QueryUnlabeledRet &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.msg, b.msg);
  swap(a.pageNum, b.pageNum);
  swap(a.picVec, b.picVec);
  swap(a.__isset, b.__isset);
}

QueryUnlabeledRet::QueryUnlabeledRet(const QueryUnlabeledRet& other48) {
  code = other48.code;
  msg = other48.msg;
  pageNum = other48.pageNum;
  picVec = other48.picVec;
  __isset = other48.__isset;
}
QueryUnlabeledRet& QueryUnlabeledRet::operator=(const QueryUnlabeledRet& other49) {
  code = other49.code;
  msg = other49.msg;
  pageNum = other49.pageNum;
  picVec = other49.picVec;
  __isset = other49.__isset;
  return *this;
}
void QueryUnlabeledRet::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "QueryUnlabeledRet(";
  out << "code=" << to_string(code);
  out << ", " << "msg=" << to_string(msg);
  out << ", " << "pageNum=" << to_string(pageNum);
  out << ", " << "picVec=" << to_string(picVec);
  out << ")";
}


QueryByIdRet::~QueryByIdRet() throw() {
}


void QueryByIdRet::__set_code(const int32_t val) {
  this->code = val;
}

void QueryByIdRet::__set_msg(const std::string& val) {
  this->msg = val;
}

void QueryByIdRet::__set_pageNum(const int32_t val) {
  this->pageNum = val;
}

void QueryByIdRet::__set_pic(const QueryedPicInfo& val) {
  this->pic = val;
}
std::ostream& operator<<(std::ostream& out, const QueryByIdRet& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t QueryByIdRet::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->msg);
          this->__isset.msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pageNum);
          this->__isset.pageNum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->pic.read(iprot);
          this->__isset.pic = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t QueryByIdRet::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("QueryByIdRet");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pageNum", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->pageNum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pic", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->pic.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(QueryByIdRet &a, QueryByIdRet &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.msg, b.msg);
  swap(a.pageNum, b.pageNum);
  swap(a.pic, b.pic);
  swap(a.__isset, b.__isset);
}

QueryByIdRet::QueryByIdRet(const QueryByIdRet& other50) {
  code = other50.code;
  msg = other50.msg;
  pageNum = other50.pageNum;
  pic = other50.pic;
  __isset = other50.__isset;
}
QueryByIdRet& QueryByIdRet::operator=(const QueryByIdRet& other51) {
  code = other51.code;
  msg = other51.msg;
  pageNum = other51.pageNum;
  pic = other51.pic;
  __isset = other51.__isset;
  return *this;
}
void QueryByIdRet::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "QueryByIdRet(";
  out << "code=" << to_string(code);
  out << ", " << "msg=" << to_string(msg);
  out << ", " << "pageNum=" << to_string(pageNum);
  out << ", " << "pic=" << to_string(pic);
  out << ")";
}


DownloadRet::~DownloadRet() throw() {
}


void DownloadRet::__set_code(const int32_t val) {
  this->code = val;
}

void DownloadRet::__set_msg(const std::string& val) {
  this->msg = val;
}

void DownloadRet::__set_bin(const std::string& val) {
  this->bin = val;
}

void DownloadRet::__set_pic_id(const int32_t val) {
  this->pic_id = val;
}

void DownloadRet::__set_HumanPose2DInfo(const std::string& val) {
  this->HumanPose2DInfo = val;
}

void DownloadRet::__set_HumanPose3DInfo(const std::string& val) {
  this->HumanPose3DInfo = val;
}
std::ostream& operator<<(std::ostream& out, const DownloadRet& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DownloadRet::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->msg);
          this->__isset.msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->bin);
          this->__isset.bin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pic_id);
          this->__isset.pic_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->HumanPose2DInfo);
          this->__isset.HumanPose2DInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->HumanPose3DInfo);
          this->__isset.HumanPose3DInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DownloadRet::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DownloadRet");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bin", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->bin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pic_id", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->pic_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("HumanPose2DInfo", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->HumanPose2DInfo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("HumanPose3DInfo", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->HumanPose3DInfo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DownloadRet &a, DownloadRet &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.msg, b.msg);
  swap(a.bin, b.bin);
  swap(a.pic_id, b.pic_id);
  swap(a.HumanPose2DInfo, b.HumanPose2DInfo);
  swap(a.HumanPose3DInfo, b.HumanPose3DInfo);
  swap(a.__isset, b.__isset);
}

DownloadRet::DownloadRet(const DownloadRet& other52) {
  code = other52.code;
  msg = other52.msg;
  bin = other52.bin;
  pic_id = other52.pic_id;
  HumanPose2DInfo = other52.HumanPose2DInfo;
  HumanPose3DInfo = other52.HumanPose3DInfo;
  __isset = other52.__isset;
}
DownloadRet& DownloadRet::operator=(const DownloadRet& other53) {
  code = other53.code;
  msg = other53.msg;
  bin = other53.bin;
  pic_id = other53.pic_id;
  HumanPose2DInfo = other53.HumanPose2DInfo;
  HumanPose3DInfo = other53.HumanPose3DInfo;
  __isset = other53.__isset;
  return *this;
}
void DownloadRet::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DownloadRet(";
  out << "code=" << to_string(code);
  out << ", " << "msg=" << to_string(msg);
  out << ", " << "bin=" << to_string(bin);
  out << ", " << "pic_id=" << to_string(pic_id);
  out << ", " << "HumanPose2DInfo=" << to_string(HumanPose2DInfo);
  out << ", " << "HumanPose3DInfo=" << to_string(HumanPose3DInfo);
  out << ")";
}


LabeledPoseDataRet::~LabeledPoseDataRet() throw() {
}


void LabeledPoseDataRet::__set_code(const int32_t val) {
  this->code = val;
}

void LabeledPoseDataRet::__set_msg(const std::string& val) {
  this->msg = val;
}

void LabeledPoseDataRet::__set_bin(const std::string& val) {
  this->bin = val;
}

void LabeledPoseDataRet::__set_poseData(const std::string& val) {
  this->poseData = val;
}

void LabeledPoseDataRet::__set_pre2dPoseInfo(const std::string& val) {
  this->pre2dPoseInfo = val;
}
std::ostream& operator<<(std::ostream& out, const LabeledPoseDataRet& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t LabeledPoseDataRet::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->msg);
          this->__isset.msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->bin);
          this->__isset.bin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->poseData);
          this->__isset.poseData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pre2dPoseInfo);
          this->__isset.pre2dPoseInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t LabeledPoseDataRet::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LabeledPoseDataRet");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bin", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->bin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("poseData", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->poseData);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pre2dPoseInfo", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->pre2dPoseInfo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LabeledPoseDataRet &a, LabeledPoseDataRet &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.msg, b.msg);
  swap(a.bin, b.bin);
  swap(a.poseData, b.poseData);
  swap(a.pre2dPoseInfo, b.pre2dPoseInfo);
  swap(a.__isset, b.__isset);
}

LabeledPoseDataRet::LabeledPoseDataRet(const LabeledPoseDataRet& other54) {
  code = other54.code;
  msg = other54.msg;
  bin = other54.bin;
  poseData = other54.poseData;
  pre2dPoseInfo = other54.pre2dPoseInfo;
  __isset = other54.__isset;
}
LabeledPoseDataRet& LabeledPoseDataRet::operator=(const LabeledPoseDataRet& other55) {
  code = other55.code;
  msg = other55.msg;
  bin = other55.bin;
  poseData = other55.poseData;
  pre2dPoseInfo = other55.pre2dPoseInfo;
  __isset = other55.__isset;
  return *this;
}
void LabeledPoseDataRet::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LabeledPoseDataRet(";
  out << "code=" << to_string(code);
  out << ", " << "msg=" << to_string(msg);
  out << ", " << "bin=" << to_string(bin);
  out << ", " << "poseData=" << to_string(poseData);
  out << ", " << "pre2dPoseInfo=" << to_string(pre2dPoseInfo);
  out << ")";
}


QueryCondition::~QueryCondition() throw() {
}


void QueryCondition::__set_tag(const std::string& val) {
  this->tag = val;
}

void QueryCondition::__set_pose_type(const std::string& val) {
  this->pose_type = val;
}

void QueryCondition::__set_tBegin(const std::string& val) {
  this->tBegin = val;
}

void QueryCondition::__set_tEnd(const std::string& val) {
  this->tEnd = val;
}
std::ostream& operator<<(std::ostream& out, const QueryCondition& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t QueryCondition::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tag);
          this->__isset.tag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pose_type);
          this->__isset.pose_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tBegin);
          this->__isset.tBegin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tEnd);
          this->__isset.tEnd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t QueryCondition::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("QueryCondition");

  xfer += oprot->writeFieldBegin("tag", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->tag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pose_type", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->pose_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tBegin", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->tBegin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tEnd", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->tEnd);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(QueryCondition &a, QueryCondition &b) {
  using ::std::swap;
  swap(a.tag, b.tag);
  swap(a.pose_type, b.pose_type);
  swap(a.tBegin, b.tBegin);
  swap(a.tEnd, b.tEnd);
  swap(a.__isset, b.__isset);
}

QueryCondition::QueryCondition(const QueryCondition& other56) {
  tag = other56.tag;
  pose_type = other56.pose_type;
  tBegin = other56.tBegin;
  tEnd = other56.tEnd;
  __isset = other56.__isset;
}
QueryCondition& QueryCondition::operator=(const QueryCondition& other57) {
  tag = other57.tag;
  pose_type = other57.pose_type;
  tBegin = other57.tBegin;
  tEnd = other57.tEnd;
  __isset = other57.__isset;
  return *this;
}
void QueryCondition::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "QueryCondition(";
  out << "tag=" << to_string(tag);
  out << ", " << "pose_type=" << to_string(pose_type);
  out << ", " << "tBegin=" << to_string(tBegin);
  out << ", " << "tEnd=" << to_string(tEnd);
  out << ")";
}


LoginRet::~LoginRet() throw() {
}


void LoginRet::__set_code(const int32_t val) {
  this->code = val;
}

void LoginRet::__set_msg(const std::string& val) {
  this->msg = val;
}

void LoginRet::__set_role_id(const int32_t val) {
  this->role_id = val;
}

void LoginRet::__set_token(const std::string& val) {
  this->token = val;
}
std::ostream& operator<<(std::ostream& out, const LoginRet& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t LoginRet::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->msg);
          this->__isset.msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->role_id);
          this->__isset.role_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->token);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t LoginRet::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LoginRet");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("role_id", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->role_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->token);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LoginRet &a, LoginRet &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.msg, b.msg);
  swap(a.role_id, b.role_id);
  swap(a.token, b.token);
  swap(a.__isset, b.__isset);
}

LoginRet::LoginRet(const LoginRet& other58) {
  code = other58.code;
  msg = other58.msg;
  role_id = other58.role_id;
  token = other58.token;
  __isset = other58.__isset;
}
LoginRet& LoginRet::operator=(const LoginRet& other59) {
  code = other59.code;
  msg = other59.msg;
  role_id = other59.role_id;
  token = other59.token;
  __isset = other59.__isset;
  return *this;
}
void LoginRet::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LoginRet(";
  out << "code=" << to_string(code);
  out << ", " << "msg=" << to_string(msg);
  out << ", " << "role_id=" << to_string(role_id);
  out << ", " << "token=" << to_string(token);
  out << ")";
}


PoseData::~PoseData() throw() {
}


void PoseData::__set_pose_data(const std::string& val) {
  this->pose_data = val;
}

void PoseData::__set_user_name(const std::string& val) {
  this->user_name = val;
}

void PoseData::__set_label_time(const std::string& val) {
  this->label_time = val;
}
std::ostream& operator<<(std::ostream& out, const PoseData& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PoseData::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pose_data);
          this->__isset.pose_data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->user_name);
          this->__isset.user_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->label_time);
          this->__isset.label_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PoseData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PoseData");

  xfer += oprot->writeFieldBegin("pose_data", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->pose_data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("user_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->user_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("label_time", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->label_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PoseData &a, PoseData &b) {
  using ::std::swap;
  swap(a.pose_data, b.pose_data);
  swap(a.user_name, b.user_name);
  swap(a.label_time, b.label_time);
  swap(a.__isset, b.__isset);
}

PoseData::PoseData(const PoseData& other60) {
  pose_data = other60.pose_data;
  user_name = other60.user_name;
  label_time = other60.label_time;
  __isset = other60.__isset;
}
PoseData& PoseData::operator=(const PoseData& other61) {
  pose_data = other61.pose_data;
  user_name = other61.user_name;
  label_time = other61.label_time;
  __isset = other61.__isset;
  return *this;
}
void PoseData::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PoseData(";
  out << "pose_data=" << to_string(pose_data);
  out << ", " << "user_name=" << to_string(user_name);
  out << ", " << "label_time=" << to_string(label_time);
  out << ")";
}


PoseDatasRet::~PoseDatasRet() throw() {
}


void PoseDatasRet::__set_code(const int32_t val) {
  this->code = val;
}

void PoseDatasRet::__set_msg(const std::string& val) {
  this->msg = val;
}

void PoseDatasRet::__set_pic_bin(const std::string& val) {
  this->pic_bin = val;
}

void PoseDatasRet::__set_vecPoseData(const std::vector<PoseData> & val) {
  this->vecPoseData = val;
}
std::ostream& operator<<(std::ostream& out, const PoseDatasRet& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PoseDatasRet::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->msg);
          this->__isset.msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->pic_bin);
          this->__isset.pic_bin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->vecPoseData.clear();
            uint32_t _size62;
            ::apache::thrift::protocol::TType _etype65;
            xfer += iprot->readListBegin(_etype65, _size62);
            this->vecPoseData.resize(_size62);
            uint32_t _i66;
            for (_i66 = 0; _i66 < _size62; ++_i66)
            {
              xfer += this->vecPoseData[_i66].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.vecPoseData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PoseDatasRet::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PoseDatasRet");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pic_bin", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->pic_bin);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vecPoseData", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->vecPoseData.size()));
    std::vector<PoseData> ::const_iterator _iter67;
    for (_iter67 = this->vecPoseData.begin(); _iter67 != this->vecPoseData.end(); ++_iter67)
    {
      xfer += (*_iter67).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PoseDatasRet &a, PoseDatasRet &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.msg, b.msg);
  swap(a.pic_bin, b.pic_bin);
  swap(a.vecPoseData, b.vecPoseData);
  swap(a.__isset, b.__isset);
}

PoseDatasRet::PoseDatasRet(const PoseDatasRet& other68) {
  code = other68.code;
  msg = other68.msg;
  pic_bin = other68.pic_bin;
  vecPoseData = other68.vecPoseData;
  __isset = other68.__isset;
}
PoseDatasRet& PoseDatasRet::operator=(const PoseDatasRet& other69) {
  code = other69.code;
  msg = other69.msg;
  pic_bin = other69.pic_bin;
  vecPoseData = other69.vecPoseData;
  __isset = other69.__isset;
  return *this;
}
void PoseDatasRet::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PoseDatasRet(";
  out << "code=" << to_string(code);
  out << ", " << "msg=" << to_string(msg);
  out << ", " << "pic_bin=" << to_string(pic_bin);
  out << ", " << "vecPoseData=" << to_string(vecPoseData);
  out << ")";
}


ScoreQueryRet::~ScoreQueryRet() throw() {
}


void ScoreQueryRet::__set_code(const int32_t val) {
  this->code = val;
}

void ScoreQueryRet::__set_msg(const std::string& val) {
  this->msg = val;
}

void ScoreQueryRet::__set_selfScore(const double val) {
  this->selfScore = val;
}

void ScoreQueryRet::__set_averScore(const double val) {
  this->averScore = val;
}

void ScoreQueryRet::__set_scoreCount(const int32_t val) {
  this->scoreCount = val;
}
std::ostream& operator<<(std::ostream& out, const ScoreQueryRet& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ScoreQueryRet::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->msg);
          this->__isset.msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->selfScore);
          this->__isset.selfScore = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->averScore);
          this->__isset.averScore = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->scoreCount);
          this->__isset.scoreCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ScoreQueryRet::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ScoreQueryRet");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("selfScore", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->selfScore);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("averScore", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->averScore);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("scoreCount", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->scoreCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ScoreQueryRet &a, ScoreQueryRet &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.msg, b.msg);
  swap(a.selfScore, b.selfScore);
  swap(a.averScore, b.averScore);
  swap(a.scoreCount, b.scoreCount);
  swap(a.__isset, b.__isset);
}

ScoreQueryRet::ScoreQueryRet(const ScoreQueryRet& other70) {
  code = other70.code;
  msg = other70.msg;
  selfScore = other70.selfScore;
  averScore = other70.averScore;
  scoreCount = other70.scoreCount;
  __isset = other70.__isset;
}
ScoreQueryRet& ScoreQueryRet::operator=(const ScoreQueryRet& other71) {
  code = other71.code;
  msg = other71.msg;
  selfScore = other71.selfScore;
  averScore = other71.averScore;
  scoreCount = other71.scoreCount;
  __isset = other71.__isset;
  return *this;
}
void ScoreQueryRet::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ScoreQueryRet(";
  out << "code=" << to_string(code);
  out << ", " << "msg=" << to_string(msg);
  out << ", " << "selfScore=" << to_string(selfScore);
  out << ", " << "averScore=" << to_string(averScore);
  out << ", " << "scoreCount=" << to_string(scoreCount);
  out << ")";
}

}} // namespace
