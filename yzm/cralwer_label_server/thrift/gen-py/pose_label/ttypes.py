#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys

from thrift.transport import TTransport


class ReturnVals(object):
    """
    Attributes:
     - code
     - msg
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'code', None, 0, ),  # 1
        (2, TType.STRING, 'msg', 'UTF8', None, ),  # 2
    )

    def __init__(self, code=thrift_spec[1][4], msg=None,):
        self.code = code
        self.msg = msg

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.msg = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ReturnVals')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.msg is not None:
            oprot.writeFieldBegin('msg', TType.STRING, 2)
            oprot.writeString(self.msg.encode('utf-8') if sys.version_info[0] == 2 else self.msg)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PicInfo(object):
    """
    Attributes:
     - oriBin
     - filename
     - md5
     - key
     - tag
     - ori_url
     - website
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'oriBin', 'BINARY', None, ),  # 1
        (2, TType.STRING, 'filename', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'md5', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'key', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'tag', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'ori_url', 'UTF8', None, ),  # 6
        (7, TType.STRING, 'website', 'UTF8', None, ),  # 7
    )

    def __init__(self, oriBin=None, filename=None, md5=None, key=None, tag=None, ori_url=None, website=None,):
        self.oriBin = oriBin
        self.filename = filename
        self.md5 = md5
        self.key = key
        self.tag = tag
        self.ori_url = ori_url
        self.website = website

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.oriBin = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.filename = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.md5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.key = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.tag = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.ori_url = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.website = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('PicInfo')
        if self.oriBin is not None:
            oprot.writeFieldBegin('oriBin', TType.STRING, 1)
            oprot.writeBinary(self.oriBin)
            oprot.writeFieldEnd()
        if self.filename is not None:
            oprot.writeFieldBegin('filename', TType.STRING, 2)
            oprot.writeString(self.filename.encode('utf-8') if sys.version_info[0] == 2 else self.filename)
            oprot.writeFieldEnd()
        if self.md5 is not None:
            oprot.writeFieldBegin('md5', TType.STRING, 3)
            oprot.writeString(self.md5.encode('utf-8') if sys.version_info[0] == 2 else self.md5)
            oprot.writeFieldEnd()
        if self.key is not None:
            oprot.writeFieldBegin('key', TType.STRING, 4)
            oprot.writeString(self.key.encode('utf-8') if sys.version_info[0] == 2 else self.key)
            oprot.writeFieldEnd()
        if self.tag is not None:
            oprot.writeFieldBegin('tag', TType.STRING, 5)
            oprot.writeString(self.tag.encode('utf-8') if sys.version_info[0] == 2 else self.tag)
            oprot.writeFieldEnd()
        if self.ori_url is not None:
            oprot.writeFieldBegin('ori_url', TType.STRING, 6)
            oprot.writeString(self.ori_url.encode('utf-8') if sys.version_info[0] == 2 else self.ori_url)
            oprot.writeFieldEnd()
        if self.website is not None:
            oprot.writeFieldBegin('website', TType.STRING, 7)
            oprot.writeString(self.website.encode('utf-8') if sys.version_info[0] == 2 else self.website)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CrawlerStatus(object):
    """
    Attributes:
     - totalPicSum
     - dbPicSum
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'totalPicSum', None, None, ),  # 1
        (2, TType.I32, 'dbPicSum', None, None, ),  # 2
    )

    def __init__(self, totalPicSum=None, dbPicSum=None,):
        self.totalPicSum = totalPicSum
        self.dbPicSum = dbPicSum

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.totalPicSum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dbPicSum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('CrawlerStatus')
        if self.totalPicSum is not None:
            oprot.writeFieldBegin('totalPicSum', TType.I32, 1)
            oprot.writeI32(self.totalPicSum)
            oprot.writeFieldEnd()
        if self.dbPicSum is not None:
            oprot.writeFieldBegin('dbPicSum', TType.I32, 2)
            oprot.writeI32(self.dbPicSum)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CrawlerStatusRet(object):
    """
    Attributes:
     - code
     - msg
     - crawlerStatus
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'code', None, 0, ),  # 1
        (2, TType.STRING, 'msg', 'UTF8', None, ),  # 2
        (3, TType.STRUCT, 'crawlerStatus', (CrawlerStatus, CrawlerStatus.thrift_spec), None, ),  # 3
    )

    def __init__(self, code=thrift_spec[1][4], msg=None, crawlerStatus=None,):
        self.code = code
        self.msg = msg
        self.crawlerStatus = crawlerStatus

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.msg = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.crawlerStatus = CrawlerStatus()
                    self.crawlerStatus.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('CrawlerStatusRet')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.msg is not None:
            oprot.writeFieldBegin('msg', TType.STRING, 2)
            oprot.writeString(self.msg.encode('utf-8') if sys.version_info[0] == 2 else self.msg)
            oprot.writeFieldEnd()
        if self.crawlerStatus is not None:
            oprot.writeFieldBegin('crawlerStatus', TType.STRUCT, 3)
            self.crawlerStatus.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CrawlingResult(object):
    """
    Attributes:
     - key
     - tag
     - sumTotal
     - tBegin
     - tEnd
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'key', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'tag', 'UTF8', None, ),  # 2
        (3, TType.I32, 'sumTotal', None, None, ),  # 3
        (4, TType.STRING, 'tBegin', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'tEnd', 'UTF8', None, ),  # 5
    )

    def __init__(self, key=None, tag=None, sumTotal=None, tBegin=None, tEnd=None,):
        self.key = key
        self.tag = tag
        self.sumTotal = sumTotal
        self.tBegin = tBegin
        self.tEnd = tEnd

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.key = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.tag = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.sumTotal = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.tBegin = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.tEnd = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('CrawlingResult')
        if self.key is not None:
            oprot.writeFieldBegin('key', TType.STRING, 1)
            oprot.writeString(self.key.encode('utf-8') if sys.version_info[0] == 2 else self.key)
            oprot.writeFieldEnd()
        if self.tag is not None:
            oprot.writeFieldBegin('tag', TType.STRING, 2)
            oprot.writeString(self.tag.encode('utf-8') if sys.version_info[0] == 2 else self.tag)
            oprot.writeFieldEnd()
        if self.sumTotal is not None:
            oprot.writeFieldBegin('sumTotal', TType.I32, 3)
            oprot.writeI32(self.sumTotal)
            oprot.writeFieldEnd()
        if self.tBegin is not None:
            oprot.writeFieldBegin('tBegin', TType.STRING, 4)
            oprot.writeString(self.tBegin.encode('utf-8') if sys.version_info[0] == 2 else self.tBegin)
            oprot.writeFieldEnd()
        if self.tEnd is not None:
            oprot.writeFieldBegin('tEnd', TType.STRING, 5)
            oprot.writeString(self.tEnd.encode('utf-8') if sys.version_info[0] == 2 else self.tEnd)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HistoryQueryCondition(object):
    """
    Attributes:
     - key
     - tag
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'key', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'tag', 'UTF8', None, ),  # 2
    )

    def __init__(self, key=None, tag=None,):
        self.key = key
        self.tag = tag

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.key = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.tag = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('HistoryQueryCondition')
        if self.key is not None:
            oprot.writeFieldBegin('key', TType.STRING, 1)
            oprot.writeString(self.key.encode('utf-8') if sys.version_info[0] == 2 else self.key)
            oprot.writeFieldEnd()
        if self.tag is not None:
            oprot.writeFieldBegin('tag', TType.STRING, 2)
            oprot.writeString(self.tag.encode('utf-8') if sys.version_info[0] == 2 else self.tag)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CrawlerHistory(object):
    """
    Attributes:
     - key
     - tag
     - total_sum
     - db_sum
     - time_create
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'key', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'tag', 'UTF8', None, ),  # 2
        (3, TType.I32, 'total_sum', None, None, ),  # 3
        (4, TType.I32, 'db_sum', None, None, ),  # 4
        (5, TType.STRING, 'time_create', 'UTF8', None, ),  # 5
    )

    def __init__(self, key=None, tag=None, total_sum=None, db_sum=None, time_create=None,):
        self.key = key
        self.tag = tag
        self.total_sum = total_sum
        self.db_sum = db_sum
        self.time_create = time_create

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.key = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.tag = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.total_sum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.db_sum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.time_create = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('CrawlerHistory')
        if self.key is not None:
            oprot.writeFieldBegin('key', TType.STRING, 1)
            oprot.writeString(self.key.encode('utf-8') if sys.version_info[0] == 2 else self.key)
            oprot.writeFieldEnd()
        if self.tag is not None:
            oprot.writeFieldBegin('tag', TType.STRING, 2)
            oprot.writeString(self.tag.encode('utf-8') if sys.version_info[0] == 2 else self.tag)
            oprot.writeFieldEnd()
        if self.total_sum is not None:
            oprot.writeFieldBegin('total_sum', TType.I32, 3)
            oprot.writeI32(self.total_sum)
            oprot.writeFieldEnd()
        if self.db_sum is not None:
            oprot.writeFieldBegin('db_sum', TType.I32, 4)
            oprot.writeI32(self.db_sum)
            oprot.writeFieldEnd()
        if self.time_create is not None:
            oprot.writeFieldBegin('time_create', TType.STRING, 5)
            oprot.writeString(self.time_create.encode('utf-8') if sys.version_info[0] == 2 else self.time_create)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CrawlerHistoryRet(object):
    """
    Attributes:
     - code
     - msg
     - hisVec
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'code', None, 0, ),  # 1
        (2, TType.STRING, 'msg', 'UTF8', None, ),  # 2
        (3, TType.LIST, 'hisVec', (TType.STRUCT, (CrawlerHistory, CrawlerHistory.thrift_spec), False), None, ),  # 3
    )

    def __init__(self, code=thrift_spec[1][4], msg=None, hisVec=None,):
        self.code = code
        self.msg = msg
        self.hisVec = hisVec

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.msg = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.hisVec = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = CrawlerHistory()
                        _elem5.read(iprot)
                        self.hisVec.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('CrawlerHistoryRet')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.msg is not None:
            oprot.writeFieldBegin('msg', TType.STRING, 2)
            oprot.writeString(self.msg.encode('utf-8') if sys.version_info[0] == 2 else self.msg)
            oprot.writeFieldEnd()
        if self.hisVec is not None:
            oprot.writeFieldBegin('hisVec', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.hisVec))
            for iter6 in self.hisVec:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QueryConditions(object):
    """
    Attributes:
     - tag
     - key
     - pose_type
     - website
     - tBegin
     - tEnd
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'tag', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'key', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'pose_type', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'website', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'tBegin', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'tEnd', 'UTF8', None, ),  # 6
    )

    def __init__(self, tag=None, key=None, pose_type=None, website=None, tBegin=None, tEnd=None,):
        self.tag = tag
        self.key = key
        self.pose_type = pose_type
        self.website = website
        self.tBegin = tBegin
        self.tEnd = tEnd

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.tag = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.key = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.pose_type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.website = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.tBegin = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.tEnd = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('QueryConditions')
        if self.tag is not None:
            oprot.writeFieldBegin('tag', TType.STRING, 1)
            oprot.writeString(self.tag.encode('utf-8') if sys.version_info[0] == 2 else self.tag)
            oprot.writeFieldEnd()
        if self.key is not None:
            oprot.writeFieldBegin('key', TType.STRING, 2)
            oprot.writeString(self.key.encode('utf-8') if sys.version_info[0] == 2 else self.key)
            oprot.writeFieldEnd()
        if self.pose_type is not None:
            oprot.writeFieldBegin('pose_type', TType.STRING, 3)
            oprot.writeString(self.pose_type.encode('utf-8') if sys.version_info[0] == 2 else self.pose_type)
            oprot.writeFieldEnd()
        if self.website is not None:
            oprot.writeFieldBegin('website', TType.STRING, 4)
            oprot.writeString(self.website.encode('utf-8') if sys.version_info[0] == 2 else self.website)
            oprot.writeFieldEnd()
        if self.tBegin is not None:
            oprot.writeFieldBegin('tBegin', TType.STRING, 5)
            oprot.writeString(self.tBegin.encode('utf-8') if sys.version_info[0] == 2 else self.tBegin)
            oprot.writeFieldEnd()
        if self.tEnd is not None:
            oprot.writeFieldBegin('tEnd', TType.STRING, 6)
            oprot.writeString(self.tEnd.encode('utf-8') if sys.version_info[0] == 2 else self.tEnd)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QueryedPicInfo(object):
    """
    Attributes:
     - pic_id
     - pic_url
     - tag
     - pose_type
     - create_time
     - labeledCount
     - lastLabeledUser
     - screenshot_bin
     - key
     - website
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'pic_id', None, 0, ),  # 1
        (2, TType.STRING, 'pic_url', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'tag', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'pose_type', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'create_time', 'UTF8', None, ),  # 5
        (6, TType.I32, 'labeledCount', None, None, ),  # 6
        (7, TType.STRING, 'lastLabeledUser', 'UTF8', None, ),  # 7
        (8, TType.STRING, 'screenshot_bin', 'BINARY', None, ),  # 8
        (9, TType.STRING, 'key', 'UTF8', None, ),  # 9
        (10, TType.STRING, 'website', 'UTF8', None, ),  # 10
    )

    def __init__(self, pic_id=thrift_spec[1][4], pic_url=None, tag=None, pose_type=None, create_time=None, labeledCount=None, lastLabeledUser=None, screenshot_bin=None, key=None, website=None,):
        self.pic_id = pic_id
        self.pic_url = pic_url
        self.tag = tag
        self.pose_type = pose_type
        self.create_time = create_time
        self.labeledCount = labeledCount
        self.lastLabeledUser = lastLabeledUser
        self.screenshot_bin = screenshot_bin
        self.key = key
        self.website = website

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.pic_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.pic_url = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.tag = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.pose_type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.create_time = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.labeledCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.lastLabeledUser = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.screenshot_bin = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.key = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.website = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('QueryedPicInfo')
        if self.pic_id is not None:
            oprot.writeFieldBegin('pic_id', TType.I32, 1)
            oprot.writeI32(self.pic_id)
            oprot.writeFieldEnd()
        if self.pic_url is not None:
            oprot.writeFieldBegin('pic_url', TType.STRING, 2)
            oprot.writeString(self.pic_url.encode('utf-8') if sys.version_info[0] == 2 else self.pic_url)
            oprot.writeFieldEnd()
        if self.tag is not None:
            oprot.writeFieldBegin('tag', TType.STRING, 3)
            oprot.writeString(self.tag.encode('utf-8') if sys.version_info[0] == 2 else self.tag)
            oprot.writeFieldEnd()
        if self.pose_type is not None:
            oprot.writeFieldBegin('pose_type', TType.STRING, 4)
            oprot.writeString(self.pose_type.encode('utf-8') if sys.version_info[0] == 2 else self.pose_type)
            oprot.writeFieldEnd()
        if self.create_time is not None:
            oprot.writeFieldBegin('create_time', TType.STRING, 5)
            oprot.writeString(self.create_time.encode('utf-8') if sys.version_info[0] == 2 else self.create_time)
            oprot.writeFieldEnd()
        if self.labeledCount is not None:
            oprot.writeFieldBegin('labeledCount', TType.I32, 6)
            oprot.writeI32(self.labeledCount)
            oprot.writeFieldEnd()
        if self.lastLabeledUser is not None:
            oprot.writeFieldBegin('lastLabeledUser', TType.STRING, 7)
            oprot.writeString(self.lastLabeledUser.encode('utf-8') if sys.version_info[0] == 2 else self.lastLabeledUser)
            oprot.writeFieldEnd()
        if self.screenshot_bin is not None:
            oprot.writeFieldBegin('screenshot_bin', TType.STRING, 8)
            oprot.writeBinary(self.screenshot_bin)
            oprot.writeFieldEnd()
        if self.key is not None:
            oprot.writeFieldBegin('key', TType.STRING, 9)
            oprot.writeString(self.key.encode('utf-8') if sys.version_info[0] == 2 else self.key)
            oprot.writeFieldEnd()
        if self.website is not None:
            oprot.writeFieldBegin('website', TType.STRING, 10)
            oprot.writeString(self.website.encode('utf-8') if sys.version_info[0] == 2 else self.website)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CrawleredPicRet(object):
    """
    Attributes:
     - code
     - msg
     - pageNum
     - picVec
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'code', None, 0, ),  # 1
        (2, TType.STRING, 'msg', 'UTF8', None, ),  # 2
        (3, TType.I32, 'pageNum', None, None, ),  # 3
        (4, TType.LIST, 'picVec', (TType.STRUCT, (QueryedPicInfo, QueryedPicInfo.thrift_spec), False), None, ),  # 4
    )

    def __init__(self, code=thrift_spec[1][4], msg=None, pageNum=None, picVec=None,):
        self.code = code
        self.msg = msg
        self.pageNum = pageNum
        self.picVec = picVec

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.msg = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.pageNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.picVec = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = QueryedPicInfo()
                        _elem12.read(iprot)
                        self.picVec.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('CrawleredPicRet')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.msg is not None:
            oprot.writeFieldBegin('msg', TType.STRING, 2)
            oprot.writeString(self.msg.encode('utf-8') if sys.version_info[0] == 2 else self.msg)
            oprot.writeFieldEnd()
        if self.pageNum is not None:
            oprot.writeFieldBegin('pageNum', TType.I32, 3)
            oprot.writeI32(self.pageNum)
            oprot.writeFieldEnd()
        if self.picVec is not None:
            oprot.writeFieldBegin('picVec', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.picVec))
            for iter13 in self.picVec:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QueryLabeledRet(object):
    """
    Attributes:
     - code
     - msg
     - pageNum
     - picVec
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'code', None, 0, ),  # 1
        (2, TType.STRING, 'msg', 'UTF8', None, ),  # 2
        (3, TType.I32, 'pageNum', None, None, ),  # 3
        (4, TType.LIST, 'picVec', (TType.STRUCT, (QueryedPicInfo, QueryedPicInfo.thrift_spec), False), None, ),  # 4
    )

    def __init__(self, code=thrift_spec[1][4], msg=None, pageNum=None, picVec=None,):
        self.code = code
        self.msg = msg
        self.pageNum = pageNum
        self.picVec = picVec

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.msg = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.pageNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.picVec = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = QueryedPicInfo()
                        _elem19.read(iprot)
                        self.picVec.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('QueryLabeledRet')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.msg is not None:
            oprot.writeFieldBegin('msg', TType.STRING, 2)
            oprot.writeString(self.msg.encode('utf-8') if sys.version_info[0] == 2 else self.msg)
            oprot.writeFieldEnd()
        if self.pageNum is not None:
            oprot.writeFieldBegin('pageNum', TType.I32, 3)
            oprot.writeI32(self.pageNum)
            oprot.writeFieldEnd()
        if self.picVec is not None:
            oprot.writeFieldBegin('picVec', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.picVec))
            for iter20 in self.picVec:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QueryUnlabeledRet(object):
    """
    Attributes:
     - code
     - msg
     - pageNum
     - picVec
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'code', None, 0, ),  # 1
        (2, TType.STRING, 'msg', 'UTF8', None, ),  # 2
        (3, TType.I32, 'pageNum', None, None, ),  # 3
        (4, TType.LIST, 'picVec', (TType.STRUCT, (QueryedPicInfo, QueryedPicInfo.thrift_spec), False), None, ),  # 4
    )

    def __init__(self, code=thrift_spec[1][4], msg=None, pageNum=None, picVec=None,):
        self.code = code
        self.msg = msg
        self.pageNum = pageNum
        self.picVec = picVec

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.msg = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.pageNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.picVec = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = QueryedPicInfo()
                        _elem26.read(iprot)
                        self.picVec.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('QueryUnlabeledRet')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.msg is not None:
            oprot.writeFieldBegin('msg', TType.STRING, 2)
            oprot.writeString(self.msg.encode('utf-8') if sys.version_info[0] == 2 else self.msg)
            oprot.writeFieldEnd()
        if self.pageNum is not None:
            oprot.writeFieldBegin('pageNum', TType.I32, 3)
            oprot.writeI32(self.pageNum)
            oprot.writeFieldEnd()
        if self.picVec is not None:
            oprot.writeFieldBegin('picVec', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.picVec))
            for iter27 in self.picVec:
                iter27.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QueryByIdRet(object):
    """
    Attributes:
     - code
     - msg
     - pageNum
     - pic
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'code', None, 0, ),  # 1
        (2, TType.STRING, 'msg', 'UTF8', None, ),  # 2
        (3, TType.I32, 'pageNum', None, None, ),  # 3
        (4, TType.STRUCT, 'pic', (QueryedPicInfo, QueryedPicInfo.thrift_spec), None, ),  # 4
    )

    def __init__(self, code=thrift_spec[1][4], msg=None, pageNum=None, pic=None,):
        self.code = code
        self.msg = msg
        self.pageNum = pageNum
        self.pic = pic

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.msg = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.pageNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.pic = QueryedPicInfo()
                    self.pic.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('QueryByIdRet')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.msg is not None:
            oprot.writeFieldBegin('msg', TType.STRING, 2)
            oprot.writeString(self.msg.encode('utf-8') if sys.version_info[0] == 2 else self.msg)
            oprot.writeFieldEnd()
        if self.pageNum is not None:
            oprot.writeFieldBegin('pageNum', TType.I32, 3)
            oprot.writeI32(self.pageNum)
            oprot.writeFieldEnd()
        if self.pic is not None:
            oprot.writeFieldBegin('pic', TType.STRUCT, 4)
            self.pic.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DownloadRet(object):
    """
    Attributes:
     - code
     - msg
     - bin
     - pic_id
     - HumanPose2DInfo
     - HumanPose3DInfo
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'code', None, 0, ),  # 1
        (2, TType.STRING, 'msg', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'bin', 'BINARY', None, ),  # 3
        (4, TType.I32, 'pic_id', None, None, ),  # 4
        (5, TType.STRING, 'HumanPose2DInfo', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'HumanPose3DInfo', 'UTF8', None, ),  # 6
    )

    def __init__(self, code=thrift_spec[1][4], msg=None, bin=None, pic_id=None, HumanPose2DInfo=None, HumanPose3DInfo=None,):
        self.code = code
        self.msg = msg
        self.bin = bin
        self.pic_id = pic_id
        self.HumanPose2DInfo = HumanPose2DInfo
        self.HumanPose3DInfo = HumanPose3DInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.msg = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.bin = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.pic_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.HumanPose2DInfo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.HumanPose3DInfo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('DownloadRet')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.msg is not None:
            oprot.writeFieldBegin('msg', TType.STRING, 2)
            oprot.writeString(self.msg.encode('utf-8') if sys.version_info[0] == 2 else self.msg)
            oprot.writeFieldEnd()
        if self.bin is not None:
            oprot.writeFieldBegin('bin', TType.STRING, 3)
            oprot.writeBinary(self.bin)
            oprot.writeFieldEnd()
        if self.pic_id is not None:
            oprot.writeFieldBegin('pic_id', TType.I32, 4)
            oprot.writeI32(self.pic_id)
            oprot.writeFieldEnd()
        if self.HumanPose2DInfo is not None:
            oprot.writeFieldBegin('HumanPose2DInfo', TType.STRING, 5)
            oprot.writeString(self.HumanPose2DInfo.encode('utf-8') if sys.version_info[0] == 2 else self.HumanPose2DInfo)
            oprot.writeFieldEnd()
        if self.HumanPose3DInfo is not None:
            oprot.writeFieldBegin('HumanPose3DInfo', TType.STRING, 6)
            oprot.writeString(self.HumanPose3DInfo.encode('utf-8') if sys.version_info[0] == 2 else self.HumanPose3DInfo)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LabeledPoseDataRet(object):
    """
    Attributes:
     - code
     - msg
     - bin
     - poseData
     - pre2dPoseInfo
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'code', None, 0, ),  # 1
        (2, TType.STRING, 'msg', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'bin', 'BINARY', None, ),  # 3
        (4, TType.STRING, 'poseData', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'pre2dPoseInfo', 'UTF8', None, ),  # 5
    )

    def __init__(self, code=thrift_spec[1][4], msg=None, bin=None, poseData=None, pre2dPoseInfo=None,):
        self.code = code
        self.msg = msg
        self.bin = bin
        self.poseData = poseData
        self.pre2dPoseInfo = pre2dPoseInfo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.msg = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.bin = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.poseData = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.pre2dPoseInfo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('LabeledPoseDataRet')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.msg is not None:
            oprot.writeFieldBegin('msg', TType.STRING, 2)
            oprot.writeString(self.msg.encode('utf-8') if sys.version_info[0] == 2 else self.msg)
            oprot.writeFieldEnd()
        if self.bin is not None:
            oprot.writeFieldBegin('bin', TType.STRING, 3)
            oprot.writeBinary(self.bin)
            oprot.writeFieldEnd()
        if self.poseData is not None:
            oprot.writeFieldBegin('poseData', TType.STRING, 4)
            oprot.writeString(self.poseData.encode('utf-8') if sys.version_info[0] == 2 else self.poseData)
            oprot.writeFieldEnd()
        if self.pre2dPoseInfo is not None:
            oprot.writeFieldBegin('pre2dPoseInfo', TType.STRING, 5)
            oprot.writeString(self.pre2dPoseInfo.encode('utf-8') if sys.version_info[0] == 2 else self.pre2dPoseInfo)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QueryCondition(object):
    """
    Attributes:
     - tag
     - pose_type
     - tBegin
     - tEnd
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'tag', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'pose_type', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'tBegin', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'tEnd', 'UTF8', None, ),  # 4
    )

    def __init__(self, tag=None, pose_type=None, tBegin=None, tEnd=None,):
        self.tag = tag
        self.pose_type = pose_type
        self.tBegin = tBegin
        self.tEnd = tEnd

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.tag = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.pose_type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.tBegin = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.tEnd = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('QueryCondition')
        if self.tag is not None:
            oprot.writeFieldBegin('tag', TType.STRING, 1)
            oprot.writeString(self.tag.encode('utf-8') if sys.version_info[0] == 2 else self.tag)
            oprot.writeFieldEnd()
        if self.pose_type is not None:
            oprot.writeFieldBegin('pose_type', TType.STRING, 2)
            oprot.writeString(self.pose_type.encode('utf-8') if sys.version_info[0] == 2 else self.pose_type)
            oprot.writeFieldEnd()
        if self.tBegin is not None:
            oprot.writeFieldBegin('tBegin', TType.STRING, 3)
            oprot.writeString(self.tBegin.encode('utf-8') if sys.version_info[0] == 2 else self.tBegin)
            oprot.writeFieldEnd()
        if self.tEnd is not None:
            oprot.writeFieldBegin('tEnd', TType.STRING, 4)
            oprot.writeString(self.tEnd.encode('utf-8') if sys.version_info[0] == 2 else self.tEnd)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LoginRet(object):
    """
    Attributes:
     - code
     - msg
     - role_id
     - token
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'code', None, 0, ),  # 1
        (2, TType.STRING, 'msg', 'UTF8', None, ),  # 2
        (3, TType.I32, 'role_id', None, None, ),  # 3
        (4, TType.STRING, 'token', 'UTF8', None, ),  # 4
    )

    def __init__(self, code=thrift_spec[1][4], msg=None, role_id=None, token=None,):
        self.code = code
        self.msg = msg
        self.role_id = role_id
        self.token = token

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.msg = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.role_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.token = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('LoginRet')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.msg is not None:
            oprot.writeFieldBegin('msg', TType.STRING, 2)
            oprot.writeString(self.msg.encode('utf-8') if sys.version_info[0] == 2 else self.msg)
            oprot.writeFieldEnd()
        if self.role_id is not None:
            oprot.writeFieldBegin('role_id', TType.I32, 3)
            oprot.writeI32(self.role_id)
            oprot.writeFieldEnd()
        if self.token is not None:
            oprot.writeFieldBegin('token', TType.STRING, 4)
            oprot.writeString(self.token.encode('utf-8') if sys.version_info[0] == 2 else self.token)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
