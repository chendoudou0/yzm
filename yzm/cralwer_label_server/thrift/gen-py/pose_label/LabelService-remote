#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from pose_label import LabelService
from pose_label.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  QueryUnlabeledRet QueryUnlabeledPic(string token, i32 index, QueryCondition qc)')
    print('  QueryLabeledRet QueryPicLabeledByOthers(string token, i32 index, QueryCondition qc)')
    print('  QueryLabeledRet QueryLabeledPic(string token, i32 index, QueryCondition qc)')
    print('  QueryByIdRet QueryPicById(string token, i32 pic_id)')
    print('  QueryLabeledRet QueryPicByUserName(string token, string user, i32 index, QueryCondition qc)')
    print('  DownloadRet DownloadPic(string pic_url)')
    print('  ReturnVals InsertToDb(string poseInfo, i32 pic_id, string token)')
    print('  ReturnVals InvalidatePicture(i32 pic_id, string token, bool type)')
    print('  LabeledPoseDataRet QueryLabeledPoseData(i32 pic_id, string pic_url, string token)')
    print('  LabeledPoseDataRet QueryLastLabeledPoseData(i32 pic_id, string pic_url, string user)')
    print('  ReturnVals Register(string user, string passwd)')
    print('  LoginRet Login(string user, string passwd)')
    print('  PoseDatasRet QueryPicPoseData(i32 pic_id, string pic_url, string token)')
    print('  ScoreQueryRet QueryPoseDataScore(i32 pic_id, string label_user, string token)')
    print('  ReturnVals ScorePoseData(i32 pic_id, string label_user, string token, double score)')
    print('  ReturnVals RepreProcessPic(string pic_url, string token)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = LabelService.Client(protocol)
transport.open()

if cmd == 'QueryUnlabeledPic':
    if len(args) != 3:
        print('QueryUnlabeledPic requires 3 args')
        sys.exit(1)
    pp.pprint(client.QueryUnlabeledPic(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'QueryPicLabeledByOthers':
    if len(args) != 3:
        print('QueryPicLabeledByOthers requires 3 args')
        sys.exit(1)
    pp.pprint(client.QueryPicLabeledByOthers(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'QueryLabeledPic':
    if len(args) != 3:
        print('QueryLabeledPic requires 3 args')
        sys.exit(1)
    pp.pprint(client.QueryLabeledPic(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'QueryPicById':
    if len(args) != 2:
        print('QueryPicById requires 2 args')
        sys.exit(1)
    pp.pprint(client.QueryPicById(args[0], eval(args[1]),))

elif cmd == 'QueryPicByUserName':
    if len(args) != 4:
        print('QueryPicByUserName requires 4 args')
        sys.exit(1)
    pp.pprint(client.QueryPicByUserName(args[0], args[1], eval(args[2]), eval(args[3]),))

elif cmd == 'DownloadPic':
    if len(args) != 1:
        print('DownloadPic requires 1 args')
        sys.exit(1)
    pp.pprint(client.DownloadPic(args[0],))

elif cmd == 'InsertToDb':
    if len(args) != 3:
        print('InsertToDb requires 3 args')
        sys.exit(1)
    pp.pprint(client.InsertToDb(args[0], eval(args[1]), args[2],))

elif cmd == 'InvalidatePicture':
    if len(args) != 3:
        print('InvalidatePicture requires 3 args')
        sys.exit(1)
    pp.pprint(client.InvalidatePicture(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'QueryLabeledPoseData':
    if len(args) != 3:
        print('QueryLabeledPoseData requires 3 args')
        sys.exit(1)
    pp.pprint(client.QueryLabeledPoseData(eval(args[0]), args[1], args[2],))

elif cmd == 'QueryLastLabeledPoseData':
    if len(args) != 3:
        print('QueryLastLabeledPoseData requires 3 args')
        sys.exit(1)
    pp.pprint(client.QueryLastLabeledPoseData(eval(args[0]), args[1], args[2],))

elif cmd == 'Register':
    if len(args) != 2:
        print('Register requires 2 args')
        sys.exit(1)
    pp.pprint(client.Register(args[0], args[1],))

elif cmd == 'Login':
    if len(args) != 2:
        print('Login requires 2 args')
        sys.exit(1)
    pp.pprint(client.Login(args[0], args[1],))

elif cmd == 'QueryPicPoseData':
    if len(args) != 3:
        print('QueryPicPoseData requires 3 args')
        sys.exit(1)
    pp.pprint(client.QueryPicPoseData(eval(args[0]), args[1], args[2],))

elif cmd == 'QueryPoseDataScore':
    if len(args) != 3:
        print('QueryPoseDataScore requires 3 args')
        sys.exit(1)
    pp.pprint(client.QueryPoseDataScore(eval(args[0]), args[1], args[2],))

elif cmd == 'ScorePoseData':
    if len(args) != 4:
        print('ScorePoseData requires 4 args')
        sys.exit(1)
    pp.pprint(client.ScorePoseData(eval(args[0]), args[1], args[2], eval(args[3]),))

elif cmd == 'RepreProcessPic':
    if len(args) != 2:
        print('RepreProcessPic requires 2 args')
        sys.exit(1)
    pp.pprint(client.RepreProcessPic(args[0], args[1],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
