CLogger	CLogger.cpp	/^CLogger::CLogger(const char *path, int max_size, int max_num, LOG_LEVEL level, SHIFT_MODE shft_mod)$/;"	f	class:CLogger
WRITE_LOG	CLogger.cpp	12;"	d	file:
_close	CLogger.cpp	/^void CLogger::_close()$/;"	f	class:CLogger
_file_name	CLogger.cpp	/^string CLogger::_file_name(int index)$/;"	f	class:CLogger
_open	CLogger.cpp	/^int CLogger::_open()$/;"	f	class:CLogger
_shift	CLogger.cpp	/^int CLogger::_shift()$/;"	f	class:CLogger
_write	CLogger.cpp	/^int CLogger::_write(const char *str, int len)$/;"	f	class:CLogger
debug	CLogger.cpp	/^int CLogger::debug(const char *fmt, ...)$/;"	f	class:CLogger
error	CLogger.cpp	/^int CLogger::error(const char *fmt, ...)$/;"	f	class:CLogger
info	CLogger.cpp	/^int CLogger::info(const char *fmt, ...)$/;"	f	class:CLogger
raw	CLogger.cpp	/^int CLogger::raw(const char *fmt, ...)$/;"	f	class:CLogger
warning	CLogger.cpp	/^int CLogger::warning(const char *fmt, ...)$/;"	f	class:CLogger
~CLogger	CLogger.cpp	/^CLogger::~CLogger()$/;"	f	class:CLogger
ConnectRemoteServer	Common.cpp	/^int ConnectRemoteServer(string strIp, int nPort )$/;"	f
DaemonInit	Common.cpp	/^void DaemonInit()$/;"	f
EMPTY_STRING	Common.cpp	/^string EMPTY_STRING;$/;"	v
F	Common.cpp	1005;"	d	file:
F	Common.cpp	1007;"	d	file:
F	Common.cpp	1026;"	d	file:
F	Common.cpp	944;"	d	file:
F	Common.cpp	963;"	d	file:
F	Common.cpp	965;"	d	file:
F	Common.cpp	984;"	d	file:
F	Common.cpp	986;"	d	file:
GET_UINT32	Common.cpp	885;"	d	file:
GetSystemDate	Common.cpp	/^char * GetSystemDate()$/;"	f
GetSystemTime	Common.cpp	/^char * GetSystemTime()$/;"	f
HttpParamHelper	Common.cpp	/^HttpParamHelper::HttpParamHelper()$/;"	f	class:HttpParamHelper
IsAnotherCopyRunning	Common.cpp	/^int IsAnotherCopyRunning(const char * filename)$/;"	f
MD5	Common.cpp	/^MD5::MD5()$/;"	f	class:MD5
MD5	Common.cpp	/^MD5::MD5(const char* md5src)$/;"	f	class:MD5
MD5	Common.cpp	/^MD5::MD5(unsigned long* md5src)$/;"	f	class:MD5
P	Common.cpp	934;"	d	file:
PUT_UINT32	Common.cpp	893;"	d	file:
PostParamHelper	Common.cpp	/^PostParamHelper::PostParamHelper()$/;"	f	class:PostParamHelper
PrintAlpha	Common.cpp	/^void PrintAlpha(char *pBuf, int nBufLen)$/;"	f
PrintDecimal	Common.cpp	/^void PrintDecimal(char *pBuf, int nBufLen)$/;"	f
PrintHex	Common.cpp	/^void PrintHex(char *pBuf, int nBufLen)$/;"	f
S	Common.cpp	932;"	d	file:
SetNonBlocking	Common.cpp	/^void SetNonBlocking( int nSock )$/;"	f
_httoi	Common.cpp	/^int _httoi(const char *value)$/;"	f
callSystemCmd	Common.cpp	/^bool callSystemCmd(string cmd)$/;"	f
creat_daemon	Common.cpp	/^void creat_daemon(void)$/;"	f
delParam	Common.cpp	/^bool	HttpParamHelper::delParam(const std::string &key)$/;"	f	class:HttpParamHelper
finish	Common.cpp	/^void MD5::finish( struct md5_context *ctx, uint8 digest[16] )$/;"	f	class:MD5
generate	Common.cpp	/^void MD5::generate(const std::string &buffer)$/;"	f	class:MD5
generate	Common.cpp	/^void MD5::generate(unsigned char* buffer,int bufferlen)$/;"	f	class:MD5
generateGetParamString	Common.cpp	/^std::string		HttpParamHelper::generateGetParamString(const std::string &firstPrefix,$/;"	f	class:HttpParamHelper
generateMD5	Common.cpp	/^bool generateMD5(string& path, string& strMD5)$/;"	f
getFileSize	Common.cpp	/^bool getFileSize(string& inPath, int& inSize)$/;"	f
getFullUrl	Common.cpp	/^std::string		HttpParamHelper::getFullUrl() const$/;"	f	class:HttpParamHelper
getHost	Common.cpp	/^const std::string& HttpParamHelper::getHost() const$/;"	f	class:HttpParamHelper
getParam	Common.cpp	/^const std::string&	HttpParamHelper::getParam(const std::string &key) const$/;"	f	class:HttpParamHelper
getPath	Common.cpp	/^const std::string& HttpParamHelper::getPath() const$/;"	f	class:HttpParamHelper
getPostDataString	Common.cpp	/^bool	PostParamHelper::getPostDataString(std::string *data) const$/;"	f	class:PostParamHelper
hasParam	Common.cpp	/^bool	HttpParamHelper::hasParam(const std::string &key) const$/;"	f	class:HttpParamHelper
int2string	Common.cpp	/^int int2string(int paraInt, string &paraStr)$/;"	f
listDir	Common.cpp	/^vector<string> listDir(const char *path)  $/;"	f
md5_padding	Common.cpp	/^static uint8 md5_padding[64] =$/;"	v	file:
myCpy	Common.cpp	/^int myCpy( char *desc , char *src, int nLen )$/;"	f
onWriteMemory	Common.cpp	/^size_t	HttpHelper::onWriteMemory(void *buffer, size_t size, size_t nmemb, void *ptr)$/;"	f	class:HttpHelper
operator +	Common.cpp	/^MD5 MD5::operator+(const MD5 &adder)$/;"	f	class:MD5
operator ==	Common.cpp	/^bool MD5::operator ==(const MD5 &cmper) const$/;"	f	class:MD5
postMethod	Common.cpp	/^bool	HttpHelper::postMethod(const std::string &url, $/;"	f	class:HttpHelper
process	Common.cpp	/^void MD5::process( struct md5_context *ctx, uint8 data[64] )$/;"	f	class:MD5
reset	Common.cpp	/^void	HttpParamHelper::reset()$/;"	f	class:HttpParamHelper
reset	Common.cpp	/^void	PostParamHelper::reset()$/;"	f	class:PostParamHelper
s_isDebug	Common.cpp	/^bool	HttpHelper::s_isDebug	= false;$/;"	m	class:HttpHelper	file:
setFunctionName	Common.cpp	/^void   HttpParamHelper::setFunctionName(std::string name)$/;"	f	class:HttpParamHelper
setHostPath	Common.cpp	/^void HttpParamHelper::setHostPath(const std::string &host, const std::string &path)$/;"	f	class:HttpParamHelper
setParam	Common.cpp	/^bool	HttpParamHelper::setParam(const std::string &key, bool val)$/;"	f	class:HttpParamHelper
setParam	Common.cpp	/^bool	HttpParamHelper::setParam(const std::string &key, const char *val)$/;"	f	class:HttpParamHelper
setParam	Common.cpp	/^bool	HttpParamHelper::setParam(const std::string &key, const std::string &val)$/;"	f	class:HttpParamHelper
setParam	Common.cpp	/^bool	HttpParamHelper::setParam(const std::string &key, int val)$/;"	f	class:HttpParamHelper
share_handle	Common.cpp	/^static CURLSH* share_handle = NULL;$/;"	v	file:
starts	Common.cpp	/^void MD5::starts( struct md5_context *ctx )$/;"	f	class:MD5
string2int	Common.cpp	/^int string2int(string &paraStr, int &paraInt)$/;"	f
submitPage	Common.cpp	/^bool	HttpHelper::submitPage(const PostParamHelper &helper, string *html)$/;"	f	class:HttpHelper
toString	Common.cpp	/^string MD5::toString()$/;"	f	class:MD5
update	Common.cpp	/^void MD5::update( struct md5_context *ctx, uint8 *input, uint32 length )$/;"	f	class:MD5
~HttpParamHelper	Common.cpp	/^HttpParamHelper::~HttpParamHelper()$/;"	f	class:HttpParamHelper
~PostParamHelper	Common.cpp	/^PostParamHelper::~PostParamHelper()$/;"	f	class:PostParamHelper
CDBOperator	DBOperator.cpp	/^CDBOperator::CDBOperator(DB_PARAM db_param)$/;"	f	class:CDBOperator
GenRepJson	DBOperator.cpp	/^void CDBOperator::GenRepJson(SqlMapVector objVecMap, string &JsonStr)$/;"	f	class:CDBOperator
QueryAndroidBucketAndDomain	DBOperator.cpp	/^void CDBOperator::QueryAndroidBucketAndDomain(string& inVersion, string& outBucket, string& outDomain)  throw (CException)$/;"	f	class:CDBOperator
QueryAndroidExistingVersions	DBOperator.cpp	/^void CDBOperator::QueryAndroidExistingVersions(SqlMapVector &objOutMapVector)  throw (CException)$/;"	f	class:CDBOperator
QueryAndroidNewaddedVersions	DBOperator.cpp	/^void CDBOperator::QueryAndroidNewaddedVersions(SqlMapVector &objOutMapVector)  throw (CException)$/;"	f	class:CDBOperator
QueryBucketAndDomain	DBOperator.cpp	/^void CDBOperator::QueryBucketAndDomain(int type ,string& inVersion, string& outBucket, string& outDomain)  throw (CException)$/;"	f	class:CDBOperator
QueryExistingVersions	DBOperator.cpp	/^void CDBOperator::QueryExistingVersions(int type, SqlMapVector &objOutMapVector)  throw (CException)$/;"	f	class:CDBOperator
QueryMd5s	DBOperator.cpp	/^void CDBOperator::QueryMd5s(int type, string version, KeyValueMap& outMap)  throw (CException)$/;"	f	class:CDBOperator
QueryNewaddedVersions	DBOperator.cpp	/^void CDBOperator::QueryNewaddedVersions(SqlMapVector &objOutMapVector, string type)  throw (CException)$/;"	f	class:CDBOperator
UpdateAndroidVersionStatus	DBOperator.cpp	/^void CDBOperator::UpdateAndroidVersionStatus(string& inVersionName, string& inMd5, int& inSize)	throw (CException)$/;"	f	class:CDBOperator
UpdateVersionStatus	DBOperator.cpp	/^void CDBOperator::UpdateVersionStatus(string& inVersionName, string type)  throw (CException)$/;"	f	class:CDBOperator
initMYSQL	DBOperator.cpp	/^bool CDBOperator::initMYSQL()  $/;"	f	class:CDBOperator
insertMD5toDB	DBOperator.cpp	/^void CDBOperator::insertMD5toDB(SqlMapVector& inMapVec, string type)  throw (CException)$/;"	f	class:CDBOperator
~CDBOperator	DBOperator.cpp	/^CDBOperator::~CDBOperator()$/;"	f	class:CDBOperator
CBMap	HttpSRV.cpp	/^typedef map<string, CallBackSrc*> CBMap;$/;"	t	file:
CallBackSrc	HttpSRV.cpp	/^	CallBackSrc(void* iuser, RequestCB icallback)$/;"	f	class:CallBackSrc
CallBackSrc	HttpSRV.cpp	/^class CallBackSrc {$/;"	c	file:
HTTPRequestHandlerFactory_	HttpSRV.cpp	/^	HTTPRequestHandlerFactory_(CBMap* cbMap) : _cbMap(cbMap) {}$/;"	f	class:HTTPRequestHandlerFactory_
HTTPRequestHandlerFactory_	HttpSRV.cpp	/^class HTTPRequestHandlerFactory_ : public HTTPRequestHandlerFactory {$/;"	c	file:
HTTPRequestHandler_	HttpSRV.cpp	/^	HTTPRequestHandler_(CBMap* cbMap)$/;"	f	class:HTTPRequestHandler_
HTTPRequestHandler_	HttpSRV.cpp	/^class HTTPRequestHandler_: public HTTPRequestHandler$/;"	c	file:
HttpSRV_addRequestCB	HttpSRV.cpp	/^int HttpSRV_addRequestCB(HttpSRV* http,const char* uri, RequestCB requestCB,void* arg)$/;"	f
HttpSRV_destory	HttpSRV.cpp	/^int HttpSRV_destory(HttpSRV* http) $/;"	f
HttpSRV_init	HttpSRV.cpp	/^ HttpSRV* HttpSRV_init()$/;"	f
HttpSRV_start	HttpSRV.cpp	/^int HttpSRV_start(HttpSRV* http, int port)$/;"	f
ResponseData	HttpSRV.cpp	/^struct ResponseData {$/;"	s	file:
_cbMap	HttpSRV.cpp	/^	CBMap* _cbMap;$/;"	m	class:HTTPRequestHandlerFactory_	file:
_cbMap	HttpSRV.cpp	/^	CBMap* _cbMap;$/;"	m	class:HTTPRequestHandler_	file:
callback	HttpSRV.cpp	/^	RequestCB callback;$/;"	m	class:CallBackSrc	file:
createRequestHandler	HttpSRV.cpp	/^	HTTPRequestHandler* createRequestHandler(const HTTPServerRequest& request) {$/;"	f	class:HTTPRequestHandlerFactory_
data	HttpSRV.cpp	/^	char* data;$/;"	m	struct:ResponseData	file:
handleRequest	HttpSRV.cpp	/^	void handleRequest(HTTPServerRequest& request, HTTPServerResponse& response) {$/;"	f	class:HTTPRequestHandler_
responseCB	HttpSRV.cpp	/^int responseCB(const void* const cbConstArg, const char* idata)$/;"	f
user	HttpSRV.cpp	/^	void* user;$/;"	m	class:CallBackSrc	file:
CC	Inc.mk	/^CC = g++$/;"	m
CFLAGS	Inc.mk	/^CFLAGS = -O3 -DNDEBUG -w   $/;"	m
CXX	Inc.mk	/^CXX = g++$/;"	m
Init	Mutex.cpp	/^int cMutex::Init()$/;"	f	class:cMutex
Lock	Mutex.cpp	/^int cMutex::Lock()$/;"	f	class:cMutex
cMutex	Mutex.cpp	/^cMutex::cMutex()$/;"	f	class:cMutex
unLock	Mutex.cpp	/^int cMutex::unLock()$/;"	f	class:cMutex
~cMutex	Mutex.cpp	/^cMutex::~cMutex()$/;"	f	class:cMutex
ThreadBase	ThreadBase.cpp	/^ThreadBase::ThreadBase(int nStackSize \/* = 0 *\/)$/;"	f	class:ThreadBase
start	ThreadBase.cpp	/^bool ThreadBase::start() $/;"	f	class:ThreadBase
stop	ThreadBase.cpp	/^bool ThreadBase::stop()$/;"	f	class:ThreadBase
threadFunc	ThreadBase.cpp	/^void* ThreadBase::threadFunc(void *arg)$/;"	f	class:ThreadBase
~ThreadBase	ThreadBase.cpp	/^ThreadBase::~ThreadBase() $/;"	f	class:ThreadBase
CWriteLog	WriteLog.cpp	/^CWriteLog::CWriteLog()$/;"	f	class:CWriteLog
Init	WriteLog.cpp	/^int CWriteLog::Init(const string  strFileName, int nWorkFlag, int nlevel, long filesize )$/;"	f	class:CWriteLog
OutputLog	WriteLog.cpp	/^int CWriteLog::OutputLog( int nlevel, const char * pszFormat, va_list argList)$/;"	f	class:CWriteLog
WriteLog	WriteLog.cpp	/^int CWriteLog::WriteLog(int nlevel, const char *pszFormat, ...)$/;"	f	class:CWriteLog
statLog	WriteLog.cpp	/^CWriteLog statLog;$/;"	v
watLog	WriteLog.cpp	/^CWriteLog watLog;$/;"	v
~CWriteLog	WriteLog.cpp	/^CWriteLog::~CWriteLog()$/;"	f	class:CWriteLog
GetDBParam	configManager.cpp	/^bool CConfigManager::GetDBParam(string path)$/;"	f	class:CConfigManager
GetMainParam	configManager.cpp	/^bool  CConfigManager::GetMainParam(string path)$/;"	f	class:CConfigManager
GetRedisParam	configManager.cpp	/^bool CConfigManager::GetRedisParam(string path)$/;"	f	class:CConfigManager
GetServerIpList	configManager.cpp	/^bool  CConfigManager::GetServerIpList(string path)$/;"	f	class:CConfigManager
ParseConf	configManager.cpp	/^bool CConfigManager::ParseConf(string& path, Document& doc)$/;"	f	class:CConfigManager
CConfigManager	configManager.h	/^class CConfigManager$/;"	c
_CONFIG_MANAGER_H	configManager.h	2;"	d
_cpp_callback_url	configManager.h	/^	string _cpp_callback_url;$/;"	m	class:CConfigManager
_db_param	configManager.h	/^	DB_PARAM _db_param;$/;"	m	class:CConfigManager
_listen_port	configManager.h	/^	int _listen_port;$/;"	m	class:CConfigManager
_redis_param	configManager.h	/^	REDIS_PARAM _redis_param;$/;"	m	class:CConfigManager
_uri_for_cpp	configManager.h	/^	string _uri_for_cpp;$/;"	m	class:CConfigManager
_uri_ip_map	configManager.h	/^	URI_IPS_MAP _uri_ip_map;$/;"	m	class:CConfigManager
_uri_vec	configManager.h	/^	vector<string> _uri_vec;$/;"	m	class:CConfigManager
CException	exception.cpp	/^CException::CException(int errNo, const string& strErrInfo) throw()$/;"	f	class:CException
CException	exception.cpp	/^CException::CException(int errNum, const char* szErrInfo) throw() $/;"	f	class:CException
error	exception.cpp	/^int CException::error() const throw()$/;"	f	class:CException
what	exception.cpp	/^const char* CException::what() const throw()$/;"	f	class:CException
~CException	exception.cpp	/^CException::~CException() throw()$/;"	f	class:CException
ChttpHandler	httpHandler.cpp	/^ChttpHandler::ChttpHandler()$/;"	f	class:ChttpHandler
dealFittingOnlineVersionQuery	httpHandler.cpp	/^int ChttpHandler::dealFittingOnlineVersionQuery(string& response,  bool& error, string& errorInfo)$/;"	f	class:ChttpHandler
~ChttpHandler	httpHandler.cpp	/^ChttpHandler::~ChttpHandler()$/;"	f	class:ChttpHandler
CJsonOperator	jsonOperator.cpp	/^CJsonOperator::CJsonOperator(Document::AllocatorType& allocator)$/;"	f	class:CJsonOperator
addArray	jsonOperator.cpp	/^bool CJsonOperator::addArray(string key, SqlMapVector& mapVec)$/;"	f	class:CJsonOperator
addMember	jsonOperator.cpp	/^bool CJsonOperator::addMember(string key, string value)$/;"	f	class:CJsonOperator
genOutput	jsonOperator.cpp	/^bool CJsonOperator::genOutput()$/;"	f	class:CJsonOperator
~CJsonOperator	jsonOperator.cpp	/^CJsonOperator::~CJsonOperator()$/;"	f	class:CJsonOperator
CJsonOperator	jsonOperator.h	/^class CJsonOperator$/;"	c
KeyValueMap	jsonOperator.h	/^typedef    map<string,string>		KeyValueMap;$/;"	t
SqlMapVector	jsonOperator.h	/^typedef    vector<KeyValueMap>		SqlMapVector;  $/;"	t
_JSON_OPERATOR_H	jsonOperator.h	2;"	d
_allocator	jsonOperator.h	/^	Document::AllocatorType& _allocator;$/;"	m	class:CJsonOperator
_root	jsonOperator.h	/^	Value* _root;$/;"	m	class:CJsonOperator
_strOutput	jsonOperator.h	/^	string _strOutput;$/;"	m	class:CJsonOperator
getOutput	jsonOperator.h	/^	string getOutput() { return _strOutput; }$/;"	f	class:CJsonOperator
GenErrorResponse	main.cpp	/^int GenErrorResponse(string& response, string& error)$/;"	f
analyzeJson	main.cpp	/^int  analyzeJson(char* strJson, KeyValueMap& mapJson)$/;"	f
callback	main.cpp	/^int callback(const RecvInfo* pRecvInfo, ResponseCB respCB, const void* const _cbThis, void* arg)$/;"	f
dealAndroidVersionQuery	main.cpp	/^int dealAndroidVersionQuery(bool& bError, string& strError, string& response)$/;"	f
dealFittingOnLineVersionQuery	main.cpp	/^int dealFittingOnLineVersionQuery(bool& bError, string& strError, string& response)$/;"	f
dealFittingOnLineVersionUpdate	main.cpp	/^int dealFittingOnLineVersionUpdate(KeyValueMap& inMap, bool& bError, string& strError, string& response)$/;"	f
dealwith_liveShow_version_query	main.cpp	/^bool dealwith_liveShow_version_query(string& strError, string& response)$/;"	f
dealwith_liveShow_version_update	main.cpp	/^bool dealwith_liveShow_version_update(KeyValueMap& inMap, string& strError, string& response)$/;"	f
findChangedfile	main.cpp	/^bool findChangedfile(int type, string version_current, string version_to, SqlMapVector& outFileVec)$/;"	f
gPtrAppLog	main.cpp	/^CLogger* gPtrAppLog = NULL;$/;"	v
gPtrConf	main.cpp	/^CConfigManager* gPtrConf = NULL;$/;"	v
gPtrDBOperator	main.cpp	/^CDBOperator*    gPtrDBOperator = NULL;$/;"	v
gPtrHttp	main.cpp	/^HttpSRV *gPtrHttp   = NULL;$/;"	v
gPtrMoniotr	main.cpp	/^comm::Monitor*  gPtrMoniotr = NULL;$/;"	v
gPtrRedisOperator	main.cpp	/^CRedisOperator* gPtrRedisOperator = NULL;$/;"	v
g_bStop	main.cpp	/^bool g_bStop        = false;$/;"	v
g_cond	main.cpp	/^condition_variable g_cond; $/;"	v
g_mtx	main.cpp	/^mutex g_mtx; $/;"	v
genUpdateResponse	main.cpp	/^bool genUpdateResponse(int type ,string version_current, string version_to, SqlMapVector& inFileMapVec, string &resp)$/;"	f
genUrlHead	main.cpp	/^int genUrlHead(string bucket, string domian,string versionName, string &head)$/;"	f
genVersionQueryResponse	main.cpp	/^int genVersionQueryResponse(int type, string& resp)$/;"	f
genVersionQueryResponseForAndroid	main.cpp	/^int genVersionQueryResponseForAndroid(string& resp)$/;"	f
getValueName	main.cpp	/^inline string getValueName(const Value& pValue, std::string& strValue)$/;"	f
init	main.cpp	/^bool init()$/;"	f
initDB	main.cpp	/^bool initDB()$/;"	f
initLog	main.cpp	/^bool initLog(string path) $/;"	f
initRedis	main.cpp	/^bool initRedis()$/;"	f
main	main.cpp	/^int main()$/;"	f
readConf	main.cpp	/^bool  readConf()     $/;"	f
signalCallback	main.cpp	/^void signalCallback(int num) $/;"	f
CRedisOperator	redisOperator.cpp	/^CRedisOperator::CRedisOperator(string ip, int port, int timeout )$/;"	f	class:CRedisOperator
CheckStatus	redisOperator.cpp	/^bool CRedisOperator::CheckStatus(redisContext *ctx)$/;"	f	class:CRedisOperator
CreateContext	redisOperator.cpp	/^redisContext* CRedisOperator::CreateContext()$/;"	f	class:CRedisOperator
ExecuteCmd	redisOperator.cpp	/^bool CRedisOperator::ExecuteCmd(const char *cmd, string &response)$/;"	f	class:CRedisOperator
ExecuteCmd	redisOperator.cpp	/^redisReply* CRedisOperator::ExecuteCmd(const char *cmd)$/;"	f	class:CRedisOperator
ReleaseContext	redisOperator.cpp	/^void CRedisOperator::ReleaseContext(redisContext *ctx, bool active)$/;"	f	class:CRedisOperator
getValue	redisOperator.cpp	/^bool CRedisOperator::getValue(string & key,string & value)$/;"	f	class:CRedisOperator
setExpireTime	redisOperator.cpp	/^bool CRedisOperator::setExpireTime(string & key,string secTime)$/;"	f	class:CRedisOperator
setValue	redisOperator.cpp	/^bool CRedisOperator::setValue(string & key,string & value)$/;"	f	class:CRedisOperator
~CRedisOperator	redisOperator.cpp	/^CRedisOperator::~CRedisOperator()$/;"	f	class:CRedisOperator
CRedisOperator	redisOperator.h	/^class CRedisOperator$/;"	c
_REDIS_OPERATOR_H	redisOperator.h	2;"	d
_beginInvalidTime	redisOperator.h	/^	time_t _beginInvalidTime;$/;"	m	class:CRedisOperator
_clients	redisOperator.h	/^	queue<redisContext *> _clients;$/;"	m	class:CRedisOperator
_iPort	redisOperator.h	/^	int _iPort;$/;"	m	class:CRedisOperator
_iTimeout	redisOperator.h	/^	int _iTimeout;$/;"	m	class:CRedisOperator
_lock	redisOperator.h	/^	cMutex _lock;$/;"	m	class:CRedisOperator
_maxReconnectInterval	redisOperator.h	/^    static const int _maxReconnectInterval = 3;  $/;"	m	class:CRedisOperator
_strIp	redisOperator.h	/^	string _strIp;$/;"	m	class:CRedisOperator
AffectedRows	sqlapi.cpp	/^unsigned long CMySQL::AffectedRows() throw(CException)$/;"	f	class:CMySQL
Begin	sqlapi.cpp	/^void CMySQL::Begin() throw (CException)$/;"	f	class:CMySQL
CMySQL	sqlapi.cpp	/^CMySQL::CMySQL(const char* host, const char* user, const char* passwd, const char* port, int iOverTime)$/;"	f	class:CMySQL
Close	sqlapi.cpp	/^void  CMySQL::Close()$/;"	f	class:CMySQL
Commit	sqlapi.cpp	/^void CMySQL::Commit() throw (CException)$/;"	f	class:CMySQL
Connect	sqlapi.cpp	/^void  CMySQL::Connect() throw(CException)$/;"	f	class:CMySQL
EscapeStr	sqlapi.cpp	/^CMySQL::EscapeStr(const string & buff)$/;"	f	class:CMySQL
FetchMd5Map	sqlapi.cpp	/^CMySQL::FetchMd5Map(KeyValueMap& outMap) throw(CException)$/;"	f	class:CMySQL
FetchResult	sqlapi.cpp	/^MYSQL_RES* CMySQL::FetchResult() throw(CException)$/;"	f	class:CMySQL
FetchResultMVector	sqlapi.cpp	/^CMySQL::FetchResultMVector(SqlMapVector & objMapVector) throw(CException)$/;"	f	class:CMySQL
FetchResultMap	sqlapi.cpp	/^CMySQL::FetchResultMap(SqlResultSet & objMap) throw(CException)$/;"	f	class:CMySQL
FetchResultMapVector	sqlapi.cpp	/^CMySQL::FetchResultMapVector(SqlMapVector & objMapVector) throw(CException)$/;"	f	class:CMySQL
FetchResultRow	sqlapi.cpp	/^CMySQL::FetchResultRow(MYSQL_ROW &row) throw(CException)$/;"	f	class:CMySQL
FetchResultVectorVectorMap	sqlapi.cpp	/^CMySQL::FetchResultVectorVectorMap(SqlVectorVectorMap & objVectorVectorMap) throw(CException)$/;"	f	class:CMySQL
FetchRows	sqlapi.cpp	/^CMySQL::FetchRows()$/;"	f	class:CMySQL
GetInsertSQL	sqlapi.cpp	/^CMySQL::GetInsertSQL(SqlResultSet & objMap, const string & strTableName) throw(CException)$/;"	f	class:CMySQL
GetReplaceSQL	sqlapi.cpp	/^CMySQL::GetReplaceSQL(SqlResultSet & objMap, const string & strTableName) throw(CException)$/;"	f	class:CMySQL
GetSelectSQL	sqlapi.cpp	/^CMySQL::GetSelectSQL(SqlResultSet & objMap, const string & strTableName, const string & strOther \/* = "" *\/)$/;"	f	class:CMySQL
GetUpdateSQL	sqlapi.cpp	/^CMySQL::GetUpdateSQL(SqlResultSet & objValueMap, SqlResultSet & objWhereMap, const string & strTableName) throw(CException)$/;"	f	class:CMySQL
GetWhere	sqlapi.cpp	/^CMySQL::GetWhere(SqlResultSet & objWhereMap)$/;"	f	class:CMySQL
Ping	sqlapi.cpp	/^bool CMySQL::Ping()$/;"	f	class:CMySQL
Query	sqlapi.cpp	/^void CMySQL::Query(const char *query, unsigned int length) throw(CException)$/;"	f	class:CMySQL
Rollback	sqlapi.cpp	/^void CMySQL::Rollback() throw (CException)$/;"	f	class:CMySQL
ValiStr	sqlapi.cpp	/^CMySQL::ValiStr(char *str)$/;"	f	class:CMySQL
~CMySQL	sqlapi.cpp	/^CMySQL::~CMySQL()$/;"	f	class:CMySQL
CversionQueryProcessor	versionQueryProcessor.cpp	/^CversionQueryProcessor::CversionQueryProcessor(char* request_buffer)$/;"	f	class:CversionQueryProcessor
check_paramter	versionQueryProcessor.cpp	/^bool CversionQueryProcessor::check_paramter()$/;"	f	class:CversionQueryProcessor
dealwith_android_verison_query	versionQueryProcessor.cpp	/^void CversionQueryProcessor::dealwith_android_verison_query()$/;"	f	class:CversionQueryProcessor
dealwith_livershow_verison_query	versionQueryProcessor.cpp	/^void CversionQueryProcessor::dealwith_livershow_verison_query()$/;"	f	class:CversionQueryProcessor
gen_error_response	versionQueryProcessor.cpp	/^void CversionQueryProcessor::gen_error_response()$/;"	f	class:CversionQueryProcessor
query_android_version	versionQueryProcessor.cpp	/^bool CversionQueryProcessor::query_android_version()$/;"	f	class:CversionQueryProcessor
~CversionQueryProcessor	versionQueryProcessor.cpp	/^CversionQueryProcessor::~CversionQueryProcessor()$/;"	f	class:CversionQueryProcessor
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.8	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
