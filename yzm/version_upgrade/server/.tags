!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AffectedRows	.\sqlapi.cpp	/^unsigned long CMySQL::AffectedRows() throw(CException)$/;"	f	class:CMySQL
Begin	.\sqlapi.cpp	/^void CMySQL::Begin() throw (CException)$/;"	f	class:CMySQL
CBMap	.\HttpSRV.cpp	/^typedef map<string, CallBackSrc*> CBMap;$/;"	t	file:
CC	.\Inc.mk	/^CC = g++$/;"	m
CConfigManager	.\configManager.h	/^class CConfigManager$/;"	c
CDBOperator	.\DBOperator.cpp	/^CDBOperator::CDBOperator(DB_PARAM db_param)$/;"	f	class:CDBOperator
CException	.\exception.cpp	/^CException::CException(int errNo, const string& strErrInfo) throw()$/;"	f	class:CException
CException	.\exception.cpp	/^CException::CException(int errNum, const char* szErrInfo) throw() $/;"	f	class:CException
CFLAGS	.\Inc.mk	/^CFLAGS = -O3 -DNDEBUG -w   $/;"	m
CJsonOperator	.\jsonOperator.cpp	/^CJsonOperator::CJsonOperator(Document::AllocatorType& allocator)$/;"	f	class:CJsonOperator
CJsonOperator	.\jsonOperator.h	/^class CJsonOperator$/;"	c
CLogger	.\CLogger.cpp	/^CLogger::CLogger(const char *path, int max_size, int max_num, LOG_LEVEL level, SHIFT_MODE shft_mod)$/;"	f	class:CLogger
CMySQL	.\sqlapi.cpp	/^CMySQL::CMySQL(const char* host, const char* user, const char* passwd, const char* port, int iOverTime)$/;"	f	class:CMySQL
CRedisOperator	.\redisOperator.cpp	/^CRedisOperator::CRedisOperator(string ip, int port, int timeout )$/;"	f	class:CRedisOperator
CRedisOperator	.\redisOperator.h	/^class CRedisOperator$/;"	c
CWriteLog	.\WriteLog.cpp	/^CWriteLog::CWriteLog()$/;"	f	class:CWriteLog
CXX	.\Inc.mk	/^CXX = g++$/;"	m
CallBackSrc	.\HttpSRV.cpp	/^	CallBackSrc(void* iuser, RequestCB icallback)$/;"	f	class:CallBackSrc
CallBackSrc	.\HttpSRV.cpp	/^class CallBackSrc {$/;"	c	file:
CheckStatus	.\redisOperator.cpp	/^bool CRedisOperator::CheckStatus(redisContext *ctx)$/;"	f	class:CRedisOperator
ChttpHandler	.\httpHandler.cpp	/^ChttpHandler::ChttpHandler()$/;"	f	class:ChttpHandler
Close	.\sqlapi.cpp	/^void  CMySQL::Close()$/;"	f	class:CMySQL
Commit	.\sqlapi.cpp	/^void CMySQL::Commit() throw (CException)$/;"	f	class:CMySQL
Connect	.\sqlapi.cpp	/^void  CMySQL::Connect() throw(CException)$/;"	f	class:CMySQL
ConnectRemoteServer	.\Common.cpp	/^int ConnectRemoteServer(string strIp, int nPort )$/;"	f
CreateContext	.\redisOperator.cpp	/^redisContext* CRedisOperator::CreateContext()$/;"	f	class:CRedisOperator
CversionQueryProcessor	.\versionQueryProcessor.cpp	/^CversionQueryProcessor::CversionQueryProcessor(char* request_buffer)$/;"	f	class:CversionQueryProcessor
DaemonInit	.\Common.cpp	/^void DaemonInit()$/;"	f
EMPTY_STRING	.\Common.cpp	/^string EMPTY_STRING;$/;"	v
EscapeStr	.\sqlapi.cpp	/^CMySQL::EscapeStr(const string & buff)$/;"	f	class:CMySQL
ExecuteCmd	.\redisOperator.cpp	/^bool CRedisOperator::ExecuteCmd(const char *cmd, string &response)$/;"	f	class:CRedisOperator
ExecuteCmd	.\redisOperator.cpp	/^redisReply* CRedisOperator::ExecuteCmd(const char *cmd)$/;"	f	class:CRedisOperator
F	.\Common.cpp	1005;"	d	file:
F	.\Common.cpp	1007;"	d	file:
F	.\Common.cpp	1026;"	d	file:
F	.\Common.cpp	944;"	d	file:
F	.\Common.cpp	963;"	d	file:
F	.\Common.cpp	965;"	d	file:
F	.\Common.cpp	984;"	d	file:
F	.\Common.cpp	986;"	d	file:
FetchMd5Map	.\sqlapi.cpp	/^CMySQL::FetchMd5Map(KeyValueMap& outMap) throw(CException)$/;"	f	class:CMySQL
FetchResult	.\sqlapi.cpp	/^MYSQL_RES* CMySQL::FetchResult() throw(CException)$/;"	f	class:CMySQL
FetchResultMVector	.\sqlapi.cpp	/^CMySQL::FetchResultMVector(SqlMapVector & objMapVector) throw(CException)$/;"	f	class:CMySQL
FetchResultMap	.\sqlapi.cpp	/^CMySQL::FetchResultMap(SqlResultSet & objMap) throw(CException)$/;"	f	class:CMySQL
FetchResultMapVector	.\sqlapi.cpp	/^CMySQL::FetchResultMapVector(SqlMapVector & objMapVector) throw(CException)$/;"	f	class:CMySQL
FetchResultRow	.\sqlapi.cpp	/^CMySQL::FetchResultRow(MYSQL_ROW &row) throw(CException)$/;"	f	class:CMySQL
FetchResultVectorVectorMap	.\sqlapi.cpp	/^CMySQL::FetchResultVectorVectorMap(SqlVectorVectorMap & objVectorVectorMap) throw(CException)$/;"	f	class:CMySQL
FetchRows	.\sqlapi.cpp	/^CMySQL::FetchRows()$/;"	f	class:CMySQL
GET_UINT32	.\Common.cpp	885;"	d	file:
GenErrorResponse	.\main.cpp	/^int GenErrorResponse(string& response, string& error)$/;"	f
GenRepJson	.\DBOperator.cpp	/^void CDBOperator::GenRepJson(SqlMapVector objVecMap, string &JsonStr)$/;"	f	class:CDBOperator
GetDBParam	.\configManager.cpp	/^bool CConfigManager::GetDBParam(string path)$/;"	f	class:CConfigManager
GetInsertSQL	.\sqlapi.cpp	/^CMySQL::GetInsertSQL(SqlResultSet & objMap, const string & strTableName) throw(CException)$/;"	f	class:CMySQL
GetMainParam	.\configManager.cpp	/^bool  CConfigManager::GetMainParam(string path)$/;"	f	class:CConfigManager
GetRedisParam	.\configManager.cpp	/^bool CConfigManager::GetRedisParam(string path)$/;"	f	class:CConfigManager
GetReplaceSQL	.\sqlapi.cpp	/^CMySQL::GetReplaceSQL(SqlResultSet & objMap, const string & strTableName) throw(CException)$/;"	f	class:CMySQL
GetSelectSQL	.\sqlapi.cpp	/^CMySQL::GetSelectSQL(SqlResultSet & objMap, const string & strTableName, const string & strOther \/* = "" *\/)$/;"	f	class:CMySQL
GetServerIpList	.\configManager.cpp	/^bool  CConfigManager::GetServerIpList(string path)$/;"	f	class:CConfigManager
GetSystemDate	.\Common.cpp	/^char * GetSystemDate()$/;"	f
GetSystemTime	.\Common.cpp	/^char * GetSystemTime()$/;"	f
GetUpdateSQL	.\sqlapi.cpp	/^CMySQL::GetUpdateSQL(SqlResultSet & objValueMap, SqlResultSet & objWhereMap, const string & strTableName) throw(CException)$/;"	f	class:CMySQL
GetWhere	.\sqlapi.cpp	/^CMySQL::GetWhere(SqlResultSet & objWhereMap)$/;"	f	class:CMySQL
HTTPRequestHandlerFactory_	.\HttpSRV.cpp	/^	HTTPRequestHandlerFactory_(CBMap* cbMap) : _cbMap(cbMap) {}$/;"	f	class:HTTPRequestHandlerFactory_
HTTPRequestHandlerFactory_	.\HttpSRV.cpp	/^class HTTPRequestHandlerFactory_ : public HTTPRequestHandlerFactory {$/;"	c	file:
HTTPRequestHandler_	.\HttpSRV.cpp	/^	HTTPRequestHandler_(CBMap* cbMap)$/;"	f	class:HTTPRequestHandler_
HTTPRequestHandler_	.\HttpSRV.cpp	/^class HTTPRequestHandler_: public HTTPRequestHandler$/;"	c	file:
HttpParamHelper	.\Common.cpp	/^HttpParamHelper::HttpParamHelper()$/;"	f	class:HttpParamHelper
HttpSRV_addRequestCB	.\HttpSRV.cpp	/^int HttpSRV_addRequestCB(HttpSRV* http,const char* uri, RequestCB requestCB,void* arg)$/;"	f
HttpSRV_destory	.\HttpSRV.cpp	/^int HttpSRV_destory(HttpSRV* http) $/;"	f
HttpSRV_init	.\HttpSRV.cpp	/^ HttpSRV* HttpSRV_init()$/;"	f
HttpSRV_start	.\HttpSRV.cpp	/^int HttpSRV_start(HttpSRV* http, int port)$/;"	f
Init	.\Mutex.cpp	/^int cMutex::Init()$/;"	f	class:cMutex
Init	.\WriteLog.cpp	/^int CWriteLog::Init(const string  strFileName, int nWorkFlag, int nlevel, long filesize )$/;"	f	class:CWriteLog
IsAnotherCopyRunning	.\Common.cpp	/^int IsAnotherCopyRunning(const char * filename)$/;"	f
KeyValueMap	.\jsonOperator.h	/^typedef    map<string,string>		KeyValueMap;$/;"	t
Lock	.\Mutex.cpp	/^int cMutex::Lock()$/;"	f	class:cMutex
MD5	.\Common.cpp	/^MD5::MD5()$/;"	f	class:MD5
MD5	.\Common.cpp	/^MD5::MD5(const char* md5src)$/;"	f	class:MD5
MD5	.\Common.cpp	/^MD5::MD5(unsigned long* md5src)$/;"	f	class:MD5
OutputLog	.\WriteLog.cpp	/^int CWriteLog::OutputLog( int nlevel, const char * pszFormat, va_list argList)$/;"	f	class:CWriteLog
P	.\Common.cpp	934;"	d	file:
PUT_UINT32	.\Common.cpp	893;"	d	file:
ParseConf	.\configManager.cpp	/^bool CConfigManager::ParseConf(string& path, Document& doc)$/;"	f	class:CConfigManager
Ping	.\sqlapi.cpp	/^bool CMySQL::Ping()$/;"	f	class:CMySQL
PostParamHelper	.\Common.cpp	/^PostParamHelper::PostParamHelper()$/;"	f	class:PostParamHelper
PrintAlpha	.\Common.cpp	/^void PrintAlpha(char *pBuf, int nBufLen)$/;"	f
PrintDecimal	.\Common.cpp	/^void PrintDecimal(char *pBuf, int nBufLen)$/;"	f
PrintHex	.\Common.cpp	/^void PrintHex(char *pBuf, int nBufLen)$/;"	f
Query	.\sqlapi.cpp	/^void CMySQL::Query(const char *query, unsigned int length) throw(CException)$/;"	f	class:CMySQL
QueryAndroidBucketAndDomain	.\DBOperator.cpp	/^void CDBOperator::QueryAndroidBucketAndDomain(string& inVersion, string& outBucket, string& outDomain)  throw (CException)$/;"	f	class:CDBOperator
QueryAndroidExistingVersions	.\DBOperator.cpp	/^void CDBOperator::QueryAndroidExistingVersions(SqlMapVector &objOutMapVector)  throw (CException)$/;"	f	class:CDBOperator
QueryAndroidNewaddedVersions	.\DBOperator.cpp	/^void CDBOperator::QueryAndroidNewaddedVersions(SqlMapVector &objOutMapVector)  throw (CException)$/;"	f	class:CDBOperator
QueryBucketAndDomain	.\DBOperator.cpp	/^void CDBOperator::QueryBucketAndDomain(int type ,string& inVersion, string& outBucket, string& outDomain)  throw (CException)$/;"	f	class:CDBOperator
QueryExistingVersions	.\DBOperator.cpp	/^void CDBOperator::QueryExistingVersions(int type, SqlMapVector &objOutMapVector)  throw (CException)$/;"	f	class:CDBOperator
QueryMd5s	.\DBOperator.cpp	/^void CDBOperator::QueryMd5s(int type, string version, KeyValueMap& outMap)  throw (CException)$/;"	f	class:CDBOperator
QueryNewaddedVersions	.\DBOperator.cpp	/^void CDBOperator::QueryNewaddedVersions(SqlMapVector &objOutMapVector, string type)  throw (CException)$/;"	f	class:CDBOperator
ReleaseContext	.\redisOperator.cpp	/^void CRedisOperator::ReleaseContext(redisContext *ctx, bool active)$/;"	f	class:CRedisOperator
ResponseData	.\HttpSRV.cpp	/^struct ResponseData {$/;"	s	file:
Rollback	.\sqlapi.cpp	/^void CMySQL::Rollback() throw (CException)$/;"	f	class:CMySQL
S	.\Common.cpp	932;"	d	file:
SetNonBlocking	.\Common.cpp	/^void SetNonBlocking( int nSock )$/;"	f
SqlMapVector	.\jsonOperator.h	/^typedef    vector<KeyValueMap>		SqlMapVector;  $/;"	t
ThreadBase	.\ThreadBase.cpp	/^ThreadBase::ThreadBase(int nStackSize \/* = 0 *\/)$/;"	f	class:ThreadBase
UpdateAndroidVersionStatus	.\DBOperator.cpp	/^void CDBOperator::UpdateAndroidVersionStatus(string& inVersionName, string& inMd5, int& inSize)	throw (CException)$/;"	f	class:CDBOperator
UpdateVersionStatus	.\DBOperator.cpp	/^void CDBOperator::UpdateVersionStatus(string& inVersionName, string type)  throw (CException)$/;"	f	class:CDBOperator
ValiStr	.\sqlapi.cpp	/^CMySQL::ValiStr(char *str)$/;"	f	class:CMySQL
WRITE_LOG	.\CLogger.cpp	12;"	d	file:
WriteLog	.\WriteLog.cpp	/^int CWriteLog::WriteLog(int nlevel, const char *pszFormat, ...)$/;"	f	class:CWriteLog
_CONFIG_MANAGER_H	.\configManager.h	2;"	d
_JSON_OPERATOR_H	.\jsonOperator.h	2;"	d
_REDIS_OPERATOR_H	.\redisOperator.h	2;"	d
_allocator	.\jsonOperator.h	/^	Document::AllocatorType& _allocator;$/;"	m	class:CJsonOperator
_beginInvalidTime	.\redisOperator.h	/^	time_t _beginInvalidTime;$/;"	m	class:CRedisOperator
_cbMap	.\HttpSRV.cpp	/^	CBMap* _cbMap;$/;"	m	class:HTTPRequestHandlerFactory_	file:
_cbMap	.\HttpSRV.cpp	/^	CBMap* _cbMap;$/;"	m	class:HTTPRequestHandler_	file:
_clients	.\redisOperator.h	/^	queue<redisContext *> _clients;$/;"	m	class:CRedisOperator
_close	.\CLogger.cpp	/^void CLogger::_close()$/;"	f	class:CLogger
_cpp_callback_url	.\configManager.h	/^	string _cpp_callback_url;$/;"	m	class:CConfigManager
_db_param	.\configManager.h	/^	DB_PARAM _db_param;$/;"	m	class:CConfigManager
_file_name	.\CLogger.cpp	/^string CLogger::_file_name(int index)$/;"	f	class:CLogger
_httoi	.\Common.cpp	/^int _httoi(const char *value)$/;"	f
_iPort	.\redisOperator.h	/^	int _iPort;$/;"	m	class:CRedisOperator
_iTimeout	.\redisOperator.h	/^	int _iTimeout;$/;"	m	class:CRedisOperator
_listen_port	.\configManager.h	/^	int _listen_port;$/;"	m	class:CConfigManager
_lock	.\redisOperator.h	/^	cMutex _lock;$/;"	m	class:CRedisOperator
_maxReconnectInterval	.\redisOperator.h	/^    static const int _maxReconnectInterval = 3;  $/;"	m	class:CRedisOperator
_open	.\CLogger.cpp	/^int CLogger::_open()$/;"	f	class:CLogger
_redis_param	.\configManager.h	/^	REDIS_PARAM _redis_param;$/;"	m	class:CConfigManager
_root	.\jsonOperator.h	/^	Value* _root;$/;"	m	class:CJsonOperator
_shift	.\CLogger.cpp	/^int CLogger::_shift()$/;"	f	class:CLogger
_strIp	.\redisOperator.h	/^	string _strIp;$/;"	m	class:CRedisOperator
_strOutput	.\jsonOperator.h	/^	string _strOutput;$/;"	m	class:CJsonOperator
_uri_for_cpp	.\configManager.h	/^	string _uri_for_cpp;$/;"	m	class:CConfigManager
_uri_ip_map	.\configManager.h	/^	URI_IPS_MAP _uri_ip_map;$/;"	m	class:CConfigManager
_uri_vec	.\configManager.h	/^	vector<string> _uri_vec;$/;"	m	class:CConfigManager
_write	.\CLogger.cpp	/^int CLogger::_write(const char *str, int len)$/;"	f	class:CLogger
addArray	.\jsonOperator.cpp	/^bool CJsonOperator::addArray(string key, SqlMapVector& mapVec)$/;"	f	class:CJsonOperator
addMember	.\jsonOperator.cpp	/^bool CJsonOperator::addMember(string key, string value)$/;"	f	class:CJsonOperator
analyzeJson	.\main.cpp	/^int  analyzeJson(char* strJson, KeyValueMap& mapJson)$/;"	f
cMutex	.\Mutex.cpp	/^cMutex::cMutex()$/;"	f	class:cMutex
callSystemCmd	.\Common.cpp	/^bool callSystemCmd(string cmd)$/;"	f
callback	.\HttpSRV.cpp	/^	RequestCB callback;$/;"	m	class:CallBackSrc	file:
callback	.\main.cpp	/^int callback(const RecvInfo* pRecvInfo, ResponseCB respCB, const void* const _cbThis, void* arg)$/;"	f
check_paramter	.\versionQueryProcessor.cpp	/^bool CversionQueryProcessor::check_paramter()$/;"	f	class:CversionQueryProcessor
creat_daemon	.\Common.cpp	/^void creat_daemon(void)$/;"	f
createRequestHandler	.\HttpSRV.cpp	/^	HTTPRequestHandler* createRequestHandler(const HTTPServerRequest& request) {$/;"	f	class:HTTPRequestHandlerFactory_
data	.\HttpSRV.cpp	/^	char* data;$/;"	m	struct:ResponseData	file:
dealAndroidVersionQuery	.\main.cpp	/^int dealAndroidVersionQuery(bool& bError, string& strError, string& response)$/;"	f
dealFittingOnLineVersionQuery	.\main.cpp	/^int dealFittingOnLineVersionQuery(bool& bError, string& strError, string& response)$/;"	f
dealFittingOnLineVersionUpdate	.\main.cpp	/^int dealFittingOnLineVersionUpdate(KeyValueMap& inMap, bool& bError, string& strError, string& response)$/;"	f
dealFittingOnlineVersionQuery	.\httpHandler.cpp	/^int ChttpHandler::dealFittingOnlineVersionQuery(string& response,  bool& error, string& errorInfo)$/;"	f	class:ChttpHandler
dealwith_android_verison_query	.\versionQueryProcessor.cpp	/^void CversionQueryProcessor::dealwith_android_verison_query()$/;"	f	class:CversionQueryProcessor
dealwith_liveShow_version_query	.\main.cpp	/^bool dealwith_liveShow_version_query(string& strError, string& response)$/;"	f
dealwith_liveShow_version_update	.\main.cpp	/^bool dealwith_liveShow_version_update(KeyValueMap& inMap, string& strError, string& response)$/;"	f
dealwith_livershow_verison_query	.\versionQueryProcessor.cpp	/^void CversionQueryProcessor::dealwith_livershow_verison_query()$/;"	f	class:CversionQueryProcessor
debug	.\CLogger.cpp	/^int CLogger::debug(const char *fmt, ...)$/;"	f	class:CLogger
delParam	.\Common.cpp	/^bool	HttpParamHelper::delParam(const std::string &key)$/;"	f	class:HttpParamHelper
error	.\CLogger.cpp	/^int CLogger::error(const char *fmt, ...)$/;"	f	class:CLogger
error	.\exception.cpp	/^int CException::error() const throw()$/;"	f	class:CException
findChangedfile	.\main.cpp	/^bool findChangedfile(int type, string version_current, string version_to, SqlMapVector& outFileVec)$/;"	f
finish	.\Common.cpp	/^void MD5::finish( struct md5_context *ctx, uint8 digest[16] )$/;"	f	class:MD5
gPtrAppLog	.\main.cpp	/^CLogger* gPtrAppLog = NULL;$/;"	v
gPtrConf	.\main.cpp	/^CConfigManager* gPtrConf = NULL;$/;"	v
gPtrDBOperator	.\main.cpp	/^CDBOperator*    gPtrDBOperator = NULL;$/;"	v
gPtrHttp	.\main.cpp	/^HttpSRV *gPtrHttp   = NULL;$/;"	v
gPtrMoniotr	.\main.cpp	/^comm::Monitor*  gPtrMoniotr = NULL;$/;"	v
gPtrRedisOperator	.\main.cpp	/^CRedisOperator* gPtrRedisOperator = NULL;$/;"	v
g_bStop	.\main.cpp	/^bool g_bStop        = false;$/;"	v
g_cond	.\main.cpp	/^condition_variable g_cond; $/;"	v
g_mtx	.\main.cpp	/^mutex g_mtx; $/;"	v
genOutput	.\jsonOperator.cpp	/^bool CJsonOperator::genOutput()$/;"	f	class:CJsonOperator
genUpdateResponse	.\main.cpp	/^bool genUpdateResponse(int type ,string version_current, string version_to, SqlMapVector& inFileMapVec, string &resp)$/;"	f
genUrlHead	.\main.cpp	/^int genUrlHead(string bucket, string domian,string versionName, string &head)$/;"	f
genVersionQueryResponse	.\main.cpp	/^int genVersionQueryResponse(int type, string& resp)$/;"	f
genVersionQueryResponseForAndroid	.\main.cpp	/^int genVersionQueryResponseForAndroid(string& resp)$/;"	f
gen_error_response	.\versionQueryProcessor.cpp	/^void CversionQueryProcessor::gen_error_response()$/;"	f	class:CversionQueryProcessor
generate	.\Common.cpp	/^void MD5::generate(const std::string &buffer)$/;"	f	class:MD5
generate	.\Common.cpp	/^void MD5::generate(unsigned char* buffer,int bufferlen)$/;"	f	class:MD5
generateGetParamString	.\Common.cpp	/^std::string		HttpParamHelper::generateGetParamString(const std::string &firstPrefix,$/;"	f	class:HttpParamHelper
generateMD5	.\Common.cpp	/^bool generateMD5(string& path, string& strMD5)$/;"	f
getFileSize	.\Common.cpp	/^bool getFileSize(string& inPath, int& inSize)$/;"	f
getFullUrl	.\Common.cpp	/^std::string		HttpParamHelper::getFullUrl() const$/;"	f	class:HttpParamHelper
getHost	.\Common.cpp	/^const std::string& HttpParamHelper::getHost() const$/;"	f	class:HttpParamHelper
getOutput	.\jsonOperator.h	/^	string getOutput() { return _strOutput; }$/;"	f	class:CJsonOperator
getParam	.\Common.cpp	/^const std::string&	HttpParamHelper::getParam(const std::string &key) const$/;"	f	class:HttpParamHelper
getPath	.\Common.cpp	/^const std::string& HttpParamHelper::getPath() const$/;"	f	class:HttpParamHelper
getPostDataString	.\Common.cpp	/^bool	PostParamHelper::getPostDataString(std::string *data) const$/;"	f	class:PostParamHelper
getValue	.\redisOperator.cpp	/^bool CRedisOperator::getValue(string & key,string & value)$/;"	f	class:CRedisOperator
getValueName	.\main.cpp	/^inline string getValueName(const Value& pValue, std::string& strValue)$/;"	f
handleRequest	.\HttpSRV.cpp	/^	void handleRequest(HTTPServerRequest& request, HTTPServerResponse& response) {$/;"	f	class:HTTPRequestHandler_
hasParam	.\Common.cpp	/^bool	HttpParamHelper::hasParam(const std::string &key) const$/;"	f	class:HttpParamHelper
info	.\CLogger.cpp	/^int CLogger::info(const char *fmt, ...)$/;"	f	class:CLogger
init	.\main.cpp	/^bool init()$/;"	f
initDB	.\main.cpp	/^bool initDB()$/;"	f
initLog	.\main.cpp	/^bool initLog(string path) $/;"	f
initMYSQL	.\DBOperator.cpp	/^bool CDBOperator::initMYSQL()  $/;"	f	class:CDBOperator
initRedis	.\main.cpp	/^bool initRedis()$/;"	f
insertMD5toDB	.\DBOperator.cpp	/^void CDBOperator::insertMD5toDB(SqlMapVector& inMapVec, string type)  throw (CException)$/;"	f	class:CDBOperator
int2string	.\Common.cpp	/^int int2string(int paraInt, string &paraStr)$/;"	f
listDir	.\Common.cpp	/^vector<string> listDir(const char *path)  $/;"	f
main	.\main.cpp	/^int main()$/;"	f
md5_padding	.\Common.cpp	/^static uint8 md5_padding[64] =$/;"	v	file:
myCpy	.\Common.cpp	/^int myCpy( char *desc , char *src, int nLen )$/;"	f
onWriteMemory	.\Common.cpp	/^size_t	HttpHelper::onWriteMemory(void *buffer, size_t size, size_t nmemb, void *ptr)$/;"	f	class:HttpHelper
operator +	.\Common.cpp	/^MD5 MD5::operator+(const MD5 &adder)$/;"	f	class:MD5
operator ==	.\Common.cpp	/^bool MD5::operator ==(const MD5 &cmper) const$/;"	f	class:MD5
postMethod	.\Common.cpp	/^bool	HttpHelper::postMethod(const std::string &url, $/;"	f	class:HttpHelper
process	.\Common.cpp	/^void MD5::process( struct md5_context *ctx, uint8 data[64] )$/;"	f	class:MD5
query_android_version	.\versionQueryProcessor.cpp	/^bool CversionQueryProcessor::query_android_version()$/;"	f	class:CversionQueryProcessor
raw	.\CLogger.cpp	/^int CLogger::raw(const char *fmt, ...)$/;"	f	class:CLogger
readConf	.\main.cpp	/^bool  readConf()     $/;"	f
reset	.\Common.cpp	/^void	HttpParamHelper::reset()$/;"	f	class:HttpParamHelper
reset	.\Common.cpp	/^void	PostParamHelper::reset()$/;"	f	class:PostParamHelper
responseCB	.\HttpSRV.cpp	/^int responseCB(const void* const cbConstArg, const char* idata)$/;"	f
s_isDebug	.\Common.cpp	/^bool	HttpHelper::s_isDebug	= false;$/;"	m	class:HttpHelper	file:
setExpireTime	.\redisOperator.cpp	/^bool CRedisOperator::setExpireTime(string & key,string secTime)$/;"	f	class:CRedisOperator
setFunctionName	.\Common.cpp	/^void   HttpParamHelper::setFunctionName(std::string name)$/;"	f	class:HttpParamHelper
setHostPath	.\Common.cpp	/^void HttpParamHelper::setHostPath(const std::string &host, const std::string &path)$/;"	f	class:HttpParamHelper
setParam	.\Common.cpp	/^bool	HttpParamHelper::setParam(const std::string &key, bool val)$/;"	f	class:HttpParamHelper
setParam	.\Common.cpp	/^bool	HttpParamHelper::setParam(const std::string &key, const char *val)$/;"	f	class:HttpParamHelper
setParam	.\Common.cpp	/^bool	HttpParamHelper::setParam(const std::string &key, const std::string &val)$/;"	f	class:HttpParamHelper
setParam	.\Common.cpp	/^bool	HttpParamHelper::setParam(const std::string &key, int val)$/;"	f	class:HttpParamHelper
setValue	.\redisOperator.cpp	/^bool CRedisOperator::setValue(string & key,string & value)$/;"	f	class:CRedisOperator
share_handle	.\Common.cpp	/^static CURLSH* share_handle = NULL;$/;"	v	file:
signalCallback	.\main.cpp	/^void signalCallback(int num) $/;"	f
start	.\ThreadBase.cpp	/^bool ThreadBase::start() $/;"	f	class:ThreadBase
starts	.\Common.cpp	/^void MD5::starts( struct md5_context *ctx )$/;"	f	class:MD5
statLog	.\WriteLog.cpp	/^CWriteLog statLog;$/;"	v
stop	.\ThreadBase.cpp	/^bool ThreadBase::stop()$/;"	f	class:ThreadBase
string2int	.\Common.cpp	/^int string2int(string &paraStr, int &paraInt)$/;"	f
submitPage	.\Common.cpp	/^bool	HttpHelper::submitPage(const PostParamHelper &helper, string *html)$/;"	f	class:HttpHelper
threadFunc	.\ThreadBase.cpp	/^void* ThreadBase::threadFunc(void *arg)$/;"	f	class:ThreadBase
toString	.\Common.cpp	/^string MD5::toString()$/;"	f	class:MD5
unLock	.\Mutex.cpp	/^int cMutex::unLock()$/;"	f	class:cMutex
update	.\Common.cpp	/^void MD5::update( struct md5_context *ctx, uint8 *input, uint32 length )$/;"	f	class:MD5
user	.\HttpSRV.cpp	/^	void* user;$/;"	m	class:CallBackSrc	file:
warning	.\CLogger.cpp	/^int CLogger::warning(const char *fmt, ...)$/;"	f	class:CLogger
watLog	.\WriteLog.cpp	/^CWriteLog watLog;$/;"	v
what	.\exception.cpp	/^const char* CException::what() const throw()$/;"	f	class:CException
~CDBOperator	.\DBOperator.cpp	/^CDBOperator::~CDBOperator()$/;"	f	class:CDBOperator
~CException	.\exception.cpp	/^CException::~CException() throw()$/;"	f	class:CException
~CJsonOperator	.\jsonOperator.cpp	/^CJsonOperator::~CJsonOperator()$/;"	f	class:CJsonOperator
~CLogger	.\CLogger.cpp	/^CLogger::~CLogger()$/;"	f	class:CLogger
~CMySQL	.\sqlapi.cpp	/^CMySQL::~CMySQL()$/;"	f	class:CMySQL
~CRedisOperator	.\redisOperator.cpp	/^CRedisOperator::~CRedisOperator()$/;"	f	class:CRedisOperator
~CWriteLog	.\WriteLog.cpp	/^CWriteLog::~CWriteLog()$/;"	f	class:CWriteLog
~ChttpHandler	.\httpHandler.cpp	/^ChttpHandler::~ChttpHandler()$/;"	f	class:ChttpHandler
~CversionQueryProcessor	.\versionQueryProcessor.cpp	/^CversionQueryProcessor::~CversionQueryProcessor()$/;"	f	class:CversionQueryProcessor
~HttpParamHelper	.\Common.cpp	/^HttpParamHelper::~HttpParamHelper()$/;"	f	class:HttpParamHelper
~PostParamHelper	.\Common.cpp	/^PostParamHelper::~PostParamHelper()$/;"	f	class:PostParamHelper
~ThreadBase	.\ThreadBase.cpp	/^ThreadBase::~ThreadBase() $/;"	f	class:ThreadBase
~cMutex	.\Mutex.cpp	/^cMutex::~cMutex()$/;"	f	class:cMutex
